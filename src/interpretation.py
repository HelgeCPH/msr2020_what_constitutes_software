import os
import re
import csv
import sys
import logging
import numpy as np
import pandas as pd
from glob import glob
from tqdm import tqdm
from pathlib import Path
from random import choice
from collections import Counter
from main import lang_yaml_to_df


MAIN_DIR = os.path.dirname(os.getcwd())
OUT_DIR = os.path.join(MAIN_DIR, "out")
INTERPRET_DIR = os.path.join(OUT_DIR, "interpretation")
DF_LING = lang_yaml_to_df()
DROID_COLUMNS_TO_KEEP = ["FILE_PATH", "NAME", "TYPE",
    "EXT", "EXTENSION_MISMATCH", "PUID", "MIME_TYPE"]

logging.basicConfig(format='%(asctime)s %(message)s',
                    stream=sys.stdout, level=logging.INFO)


PURPOSE = {
    'Documentation Directory': [r'(^|/)[Dd]ocs?/',
                                r'(^|/)[Dd]ocumentation/',
                                r'(^|/)[Gg]roovydoc/',
                                r'(^|/)[Jj]avadoc/',
                                r'(^|/)[Mm]an/',
                                r'(^|/)[Ee]xamples/',
                                r'(^|/)[Dd]emos?/',
                                r'(^|/)inst/doc/'],
    'Documentation File': [
        r'(^|/)CHANGE(S|LOG)?(\.|$)',
        r'(^|/)Change(s|log)?(\.|$)',
        r'(^|/)CONTRIBUTING(\.|$)',
        r'(^|/)COPYING.+(\.|$)',
        r'(^|/)INSTALL(\.|$)',
        r'(^|/)LICEN[CS]E(\.|$)',
        r'(^|/)[Ll]icen[cs]e(\.|$)',
        r'(^|/)README(\.|$)',
        r'(^|/)[Rr]eadme(\.|$)',
        r'(^|/)TODO(\.|$)',
        r'(^|/)VERSIONS?(\.|$)', ],
    'Sample Folder': [
        # Samples folders
        r'(^|/)[Ss]amples?/'],
    "Vendor Caches": [
        r'(^|/)cache/',
    ],
    "Vendor Dependencies": [
        r'(^|/)[Dd]ependencies/',
    ],
    "Vendor Distributions": [
        r'(^|/)dist/',
    ],
    "Vendor C deps": [
        r'(^|/)deps/',
        r'(^|/)configure$',
        r'(^|/)config\.guess$',
        r'(^|/)config\.sub$',
    ],
    "Vendor stuff autogenerated by autoconf - still C deps": [
        r'(^|/)aclocal\.m4',
        r'(^|/)libtool\.m4',
        r'(^|/)ltoptions\.m4',
        r'(^|/)ltsugar\.m4',
        r'(^|/)ltversion\.m4',
        r'(^|/)lt~obsolete\.m4',
    ],
    "Vendor Linters": [
        r'cpplint\.py$',
    ],
    "Vendor Node dependencies": [
        r'node_modules/',
    ],
    "Vendor Bower Components": [
        r'bower_components/',
    ],
    "Vendor Erlang bundles": [
        r'(^|/)rebar$',
        r'erlang\.mk$',
    ],
    "Vendor Go dependencies": [
        r'Godeps/_workspace/',
    ],
    "Vendor Go fixtures": [
        r'(^|/)testdata/',
    ],
    "Vendor GNU indent profiles": [
        r'\.indent\.pro',
    ],
    "Vendor Minified JavaScript and CSS": [
        r'(\.|-)min\.(js|css)$',
    ],
    "Vendor Stylesheets imported from packages": [
        r'([^\s]*)import\.(css|less|scss|styl)$',
    ],
    "Vendor Bootstrap css and js": [
        r'(^|/)bootstrap([^.]*)\.(js|css|less|scss|styl)$',
        r'(^|/)custom\.bootstrap([^\s]*)(js|css|less|scss|styl)$',
    ],
    "Vendor Font Awesome": [
        r'(^|/)font-?awesome\.(css|less|scss|styl)$',
        r'(^|/)font-?awesome/.*\.(css|less|scss|styl)$',
    ],
    "Vendor Foundation css": [
        r'(^|/)foundation\.(css|less|scss|styl)$',
    ],
    "Vendor Normalize.css": [
        r'(^|/)normalize\.(css|less|scss|styl)$',
    ],
    "Vendor Skeleton.css": [
        r'(^|/)skeleton\.(css|less|scss|styl)$',
    ],
    "Vendor Bourbon css": [
        r'(^|/)[Bb]ourbon/.*\.(css|less|scss|styl)$',
    ],
    "Vendor Animate.css": [
        r'(^|/)animate\.(css|less|scss|styl)$',
    ],
    "Vendor Materialize.css": [
        r'(^|/)materialize\.(css|less|scss|styl|js)$',
    ],
    "Vendor Select2": [
        r'(^|/)select2/.*\.(css|scss|js)$',
    ],
    "Vendor Bulma css": [
        r'(^|/)bulma\.(css|sass|scss)$',
    ],
    "Vendor Vendored dependencies": [
        r'(3rd|[Tt]hird)[-_]?[Pp]arty/',
        r'vendors?/',
        r'extern(al)?/',
        r'(^|/)[Vv]+endor/',
    ],
    "Vendor Debian packaging": [
        r'(^|/)debian/',
    ],
    "Vendor Haxelib projects often contain a neko bytecode file named run.n": [
        r'run\.n$',
    ],
    "Vendor Bootstrap Datepicker": [
        r'bootstrap-datepicker/',
    ],
    # "Vendor Commonly Bundled JavaScript frameworks ##": [

    "Vendor jQuery": [
        r'(^|/)jquery([^.]*)\.js$',
        r'(^|/)jquery\-\d\.\d+(\.\d+)?\.js$',
    ],
    "Vendor jQuery UI": [
        r'(^|/)jquery\-ui(\-\d\.\d+(\.\d+)?)?(\.\w+)?\.(js|css)$',
        r'(^|/)jquery\.(ui|effects)\.([^.]*)\.(js|css)$',
    ],
    "Vendor jQuery Gantt": [
        r'jquery\.fn\.gantt\.js$',
    ],
    "Vendor jQuery fancyBox": [
        r'jquery\.fancybox\.(js|css)$',
    ],
    "Vendor Fuel UX": [
        r'fuelux\.js$',
    ],
    "Vendor jQuery File Upload": [
        r'(^|/)jquery\.fileupload(-\w+)?\.js$',
    ],
    "Vendor jQuery dataTables": [
        r'jquery\.dataTables\.js$',
    ],
    "Vendor bootboxjs": [
        r'bootbox\.js$',
    ],
    "Vendor pdf-worker": [
        r'pdf\.worker\.js$',
    ],
    "Vendor Slick": [
        r'(^|/)slick\.\w+.js$',
    ],
    "Vendor Leaflet plugins": [
        r'(^|/)Leaflet\.Coordinates-\d+\.\d+\.\d+\.src\.js$',
        r'leaflet\.draw-src\.js$',
        r'leaflet\.draw\.css$',
        r'Control\.FullScreen\.css$',
        r'Control\.FullScreen\.js$',
        r'leaflet\.spin\.js$',
        r'wicket-leaflet\.js$',
    ],
    "Vendor Sublime Text workspace files": [
        r'\.sublime-project$',
        r'\.sublime-workspace$',
    ],
    "Vendor VS Code workspace files": [
        r'\.vscode',
    ],
    "Vendor Prototype": [
        r'(^|/)prototype(.*)\.js$',
        r'(^|/)effects\.js$',
        r'(^|/)controls\.js$',
        r'(^|/)dragdrop\.js$',
    ],
    "Vendor Typescript definition files": [
        r'(.*?)\.d\.ts$',
    ],
    "Vendor MooTools": [
        r'(^|/)mootools([^.]*)\d+\.\d+.\d+([^.]*)\.js$',
    ],
    "Vendor Dojo": [
        r'(^|/)dojo\.js$',
    ],
    "Vendor MochiKit": [
        r'(^|/)MochiKit\.js$',
    ],
    "Vendor YUI": [
        r'(^|/)yahoo-([^.]*)\.js$',
        r'(^|/)yui([^.]*)\.js$',
    ],
    "Vendor WYS editors": [
        r'(^|/)ckeditor\.js$',
        r'(^|/)tiny_mce([^.]*)\.js$',
        r'(^|/)tiny_mce/(langs|plugins|themes|utils)',
    ],
    "Vendor Ace Editor": [
        r'(^|/)ace-builds/',
    ],
    "Vendor Fontello CSS files": [
        r'(^|/)fontello(.*?)\.css$',
    ],
    "Vendor MathJax": [
        r'(^|/)MathJax/',
    ],
    "Vendor Chart.js": [
        r'(^|/)Chart\.js$',
    ],
    "Vendor CodeMirror": [
        r'(^|/)[Cc]ode[Mm]irror/(\d+\.\d+/)?(lib|mode|theme|addon|keymap|demo)',
    ],
    "Vendor SyntaxHighlighter - http://alexgorbatchev.com/": [
        r'(^|/)shBrush([^.]*)\.js$',
        r'(^|/)shCore\.js$',
        r'(^|/)shLegacy\.js$',
    ],
    "Vendor AngularJS": [
        r'(^|/)angular([^.]*)\.js$',
    ],
    "Vendor D3.js": [
        r'(^|\/)d3(\.v\d+)?([^.]*)\.js$',
    ],
    "Vendor React": [
        r'(^|/)react(-[^.]*)?\.js$',
    ],
    "Vendor flow-typed": [
        r'(^|/)flow-typed/.*\.js$',
    ],
    "Vendor Modernizr": [
        r'(^|/)modernizr\-\d\.\d+(\.\d+)?\.js$',
        r'(^|/)modernizr\.custom\.\d+\.js$',
    ],
    "Vendor Knockout": [
        r'(^|/)knockout-(\d+\.){3}(debug\.)?js$',
    ],
    # "Vendor Python ##": [

    "Vendor Sphinx": [
        r'(^|/)docs?/_?(build|themes?|templates?|static)/',
    ],
    "Vendor django": [
        r'(^|/)admin_media/',
        r'(^|/)env/',
    ],
    "Vendor Fabric": [
        r'(^|/)fabfile\.py$',
    ],
    "Vendor WAF": [
        r'(^|/)waf$',
    ],
    "Vendor .osx": [
        r'(^|/)\.osx$',
    ],
    # "Vendor Obj-C ##": [

    "Vendor Xcode": [

        r'\.xctemplate/',
        r'\.imageset/',
    ],
    "Vendor Carthage": [
        r'(^|/)Carthage/',
    ],
    "Vendor Sparkle": [
        r'(^|/)Sparkle/',
    ],
    "Vendor Crashlytics": [
        r'Crashlytics\.framework/',
    ],
    "Vendor Fabric": [
        r'Fabric\.framework/',
    ],
    "Vendor BuddyBuild": [
        r'BuddyBuildSDK\.framework/',
    ],
    "Vendor Realm": [
        r'Realm\.framework',
    ],
    "Vendor RealmSwift": [
        r'RealmSwift\.framework',
    ],
    "Vendor git config files": [
        r'gitattributes$',
        r'gitignore$',
        r'gitmodules$',
    ],
    # "Vendor Groovy ##": [

    "Vendor Gradle": [
        r'(^|/)gradlew$',
        r'(^|/)gradlew\.bat$',
        r'(^|/)gradle/wrapper/',
    ],
    # "Vendor Java ##": [

    "Vendor Maven": [
        r'(^|/)mvnw$',
        r'(^|/)mvnw\.cmd$',
        r'(^|/)\.mvn/wrapper/',
    ],
    # "Vendor .NET ##": [

    "Vendor Visual Studio IntelliSense": [
        r'-vsdoc\.js$',
        r'\.intellisense\.js$',
    ],
    "Vendor jQuery validation plugin (MS bundles this with asp.net mvc)": [
        r'(^|/)jquery([^.]*)\.validate(\.unobtrusive)?\.js$',
        r'(^|/)jquery([^.]*)\.unobtrusive\-ajax\.js$',
    ],
    "Vendor Microsoft Ajax": [
        r'(^|/)[Mm]icrosoft([Mm]vc)?([Aa]jax|[Vv]alidation)(\.debug)?\.js$',
    ],
    "Vendor NuGet": [
        r'(^|/)[Pp]ackages\/.+\.\d+\/',
    ],
    "Vendor ExtJS": [
        r'(^|/)extjs/.*?\.js$',
        r'(^|/)extjs/.*?\.xml$',
        r'(^|/)extjs/.*?\.txt$',
        r'(^|/)extjs/.*?\.html$',
        r'(^|/)extjs/.*?\.properties$',
        r'(^|/)extjs/.sencha/',
        r'(^|/)extjs/docs/',
        r'(^|/)extjs/builds/',
        r'(^|/)extjs/cmd/',
        r'(^|/)extjs/examples/',
        r'(^|/)extjs/locale/',
        r'(^|/)extjs/packages/',
        r'(^|/)extjs/plugins/',
        r'(^|/)extjs/resources/',
        r'(^|/)extjs/src/',
        r'(^|/)extjs/welcome/',
    ],
    "Vendor Html5shiv": [
        r'(^|/)html5shiv\.js$',
    ],
    "Vendor Test fixtures": [
        r'(^|/)[Tt]ests?/fixtures/',
        r'(^|/)[Ss]pecs?/fixtures/',
    ],
    "Vendor PhoneGap/Cordova": [
        r'(^|/)cordova([^.]*)\.js$',
        r'(^|/)cordova\-\d\.\d(\.\d)?\.js$',
    ],
    "Vendor Foundation js": [
        r'foundation(\..*)?\.js$',
    ],
    "Vendor Vagrant": [
        r'(^|/)[Vv]agrantfile$',
    ],
    "Vendor .DS_Stores": [
        r'\.[Dd][Ss]_[Ss]tore$',
    ],
    "Vendor R packages": [
        r'(^|/)vignettes/',
        r'(^|/)inst/extdata/',
    ],
    "Vendor Octicons": [
        r'octicons\.css$',
        r'sprockets-octicons\.scss$',
    ],
    "Vendor Typesafe Activator": [
        r'(^|/)activator$',
        r'(^|/)activator\.bat$',
    ],
    "Vendor ProGuard": [
        r'proguard\.pro$',
        r'proguard-rules\.pro$',
    ],
    "Vendor PuPHPet": [
        r'(^|/)puphpet/',
    ],
    "Vendor Android Google APIs": [
        r'(^|/)\.google_apis/',
    ],
    "Vendor Jenkins Pipeline": [
        r'(^|/)[Jj]enkinsfile$'
    ],

    # Helge's additions
    "Vendor Docker": [
        r'(^|/)[Dd]ockerfile$',
        r'Dockerfile-context$',
        r'\.dockerfile$'
    ],
    "Vendor C": [
        r'\.out$'
    ],
    "Vendor Yarn": [
        r'yarn\.lock$',
    ],
    "IDE Artifacts": [
        r'(^|/)\.metadata/\.plugins/org\.eclipse\.core\.resources/\.history/'
    ],
    "Work Artifacts": [
        r'\.lock$'
    ],
}


def find_images(df):
    return df[df.kind.str.contains('image data')]
    df[df.mime_type.str.startswith('image')].ext.unique()

    query = (df.mime_type.str.startswith('image')) & ~(
        df[pd.notna(df.MIME_TYPE)].MIME_TYPE.str.startswith('image'))
    df[~(df.MIME_TYPE.str.startswith('image'))]


def find_files_wo_extension(df):
    return df[pd.isna(df.ext)]


def prep_all_extensions():
    """This is a preprocessing step to make querying for file types quicker
    later.
    """
    # Find all entries with extensions
    have_ext = DF_LING[pd.notna(DF_LING.extensions)].extensions.values
    all_extensions = {el: True for exts in have_ext for el in exts}
    return all_extensions


def prep_all_filenames():
    have_fname = DF_LING[pd.notna(DF_LING.filenames)].filenames
    all_fnames = {el: True for fnames in have_fname for el in fnames}
    return all_fnames


def prep_all_mime_types():
    have_mtype = DF_LING[pd.notna(DF_LING.mime_type)].mime_type
    all_mtypes = {el: True for mtypes in have_mtype for el in mtypes}
    return all_mtypes


def check_by_name(fname):
    # check if the filename appears as element in any of the filename lists
    mask = DF_LING.filenames.apply(lambda x: np.any(np.in1d(x, fname)))
    res_lang_rows = DF_LING[mask]
    return res_lang_rows.index.values


def check_by_ext(extension):
    # check if the extension appears as element in any of the extension lists
    mask = DF_LING.extensions.apply(lambda x: np.any(np.in1d(x, extension)))
    res_ext_rows = DF_LING[mask]
    # Remember, they might be empty or contain more than one result
    # return res_ext_rows
    return res_ext_rows.index.values


def check_by_mtype(mime_type):
    mask = (DF_LING.mime_type == mime_type)
    res_mtype_rows = DF_LING[mask]
    # Remember, they might be empty or contain more than one result
    # return res_mtype_rows
    return res_mtype_rows.index.values


def check_by_path(path):
    # I assume
    for k, rexes in PURPOSE.items():
        for r in rexes:
            mo = re.search(r, path)
            if mo:
                return k
    return None


def what_are_you(fname, extension, mime_type, path):
    # Figure out what linguist is saying
    # 1) Check if linguist DB contains a file name of this type
    possible_idxs_by_name = check_by_name(fname)
    possible_idxs_by_ext = check_by_ext(extension)
    possible_idxs_by_mtype = check_by_mtype(mime_type)

    # Find the most likely candidate:
    possible_thing = np.concatenate(
        (possible_idxs_by_name, possible_idxs_by_ext, possible_idxs_by_mtype)).tolist()
    most_common_w_freq = Counter(possible_thing).most_common(1)
    if most_common_w_freq:
        that_one_idx, _ = most_common_w_freq[0]
        return DF_LING.iloc[that_one_idx]['type']
    else:
        return None




def create_repo_name_lookup_table():
    csv_files = glob(os.path.join(OUT_DIR, "repos*.csv"))
    # Make one DataFrame out of all these csv files
    df_repos = pd.concat((pd.read_csv(f)
                          for f in csv_files), ignore_index=True)

    repo_name_loopup = {
        n.replace('/', '_'): n for n in df_repos.full_name.unique()}
    return repo_name_loopup


REPO_NAME_LOOPUP = create_repo_name_lookup_table()


def create_complete_magic_df():
    complete_csv = os.path.join(INTERPRET_DIR, "magic_complete.csv.bz2")
    if not os.path.isfile(complete_csv):
        csv_files = glob(os.path.join(INTERMEDIATE_DIR, "magic_*.csv"))

        # Make one DataFrame out of all these csv files
        msg = f"Found {len(csv_files)} Magic CSV files for respective repos."
        logging.info(msg)

        csv_dfs = []
        for f in tqdm(csv_files):
            # The lineterminator has to be set explicitely as there are some file names
            # including carriage return characters
            csv_df = pd.read_csv(f, lineterminator='\n')
            csv_df.drop(columns=['Unnamed: 0'], inplace=True)
            csv_df.dropna(how='all', inplace=True)
            csv_dfs.append(csv_df)

        df = pd.concat(csv_dfs, ignore_index=True)
        del csv_dfs  # Saving a bit of memory

        # Read the information about the repository container
        # Not the fastest, but hey...
        logging.info("Adding a column with owner repo names")
        owner = [REPO_NAME_LOOPUP[Path(p).parts[4]] for p in tqdm(df.path)]
        df['owner'] = owner
        del owner  # Saving a bit of memory
        logging.info("Adding a column with only the file name")
        name = [Path(p).parts[-1] for p in tqdm(df.path)]
        df["name"] = name
        del name  # Saving a bit of memory

        logging.info(f"Saving new CSV file to {complete_csv}")
        df.to_csv(complete_csv, index=False, compression='infer')
    else:
        msg = f"Reading already existent magic CSV file {complete_csv}"
        logging.info(msg)
        df = pd.read_csv(complete_csv, compression='infer', lineterminator='\n')
    return df


def create_complete_droid_df():
    complete_csv = os.path.join(INTERPRET_DIR, "droid_complete.csv.bz2")
    if not os.path.isfile(complete_csv):
        cols = ["URI","FILE_PATH", "NAME","TYPE","EXT","EXTENSION_MISMATCH", 
                "PUID", "MIME_TYPE"]
        # cols = ["ID","PARENT_ID","URI","FILE_PATH","NAME","METHOD","STATUS","SIZE","TYPE",
        #         "EXT","LAST_MODIFIED","EXTENSION_MISMATCH","HASH","FORMAT_COUNT","PUID",
        #         "MIME_TYPE","FORMAT_NAME","FORMAT_VERSION"]
        rows = []

        # Make one DataFrame out of all these csv files
        csv_files = glob(os.path.join(INTERMEDIATE_DIR, "droid_*.csv"))

        msg = f"Found {len(csv_files)} DROID CSV files for respective repos."
        logging.info(msg)

        # Read the CSV files manually cutting everything with more than 18 
        # fields as droid seems to often append up to 33 fields
        for f in tqdm(csv_files):
            with open(f) as fp:
                r = csv.reader(fp)
                next(r)
                for row in r:
                    if len(row) > 18:
                        row = row[:18]
                    rows.append((row[2], row[3], row[4], row[8], row[9], 
                                 row[11], row[14], row[15]))
        df = pd.DataFrame(rows, columns=cols)
        del rows
        # Filter out all folders and unarchived contents which DROID keeps
        df = df[(df.URI.str.startswith('file:/')) & (df.TYPE != 'Folder')]
        df.to_csv(complete_csv, index=False, compression='infer')
    else:
        msg = f"Reading already existent droid CSV file {complete_csv}"
        logging.info(msg)
        df = pd.read_csv(complete_csv, compression='infer', lineterminator='\n')
    return df


def create_single_dataframe():

    complete_csv = os.path.join(INTERPRET_DIR, "all_repo_files.csv.bz2")
    if not os.path.isfile(complete_csv):
        magic_df = create_complete_magic_df()
        droid_df = create_complete_droid_df()
        # Do someting about these before merging. droid does not contain an \r 
        # with them:
        # magic_df[magic_df.path.str.contains('\r')].path.values
        for f in magic_df[magic_df.path.str.contains('\r')].path.values:
            f_short = f.rstrip()
            droid_df['FILE_PATH'][droid_df.FILE_PATH == f_short] = f


        df = pd.merge(magic_df, droid_df, how='outer', left_on=['path'], 
                      right_on=['FILE_PATH'], sort=False)
        # [36 rows x 15 columns] from droid that are not in magic
        # [197519 rows x 15 columns] from magic that are not in droid
        df.drop(columns=['URI'], inplace=True)
        df.to_csv(complete_csv, compression='infer', index=False,)
    else:
        msg = f"Reading already existent CSV file {complete_csv}"
        logging.info(msg)
        df = pd.read_csv(complete_csv, compression='infer', lineterminator='\n',
                         na_filter=False)
    
    # Remove the 36 rows that are nan in the magic dataset. I think it is 
    # justified compared to the big amount of files.
    # df.dropna(how='all', subset=['path', 'kind', 'mime_type', 'encoding', 'ext',
    #                              'name'], inplace=True)  # 'owner'
    file_empty_rows = df[(df.owner == '') & (df.path == '') & 
                     (df.kind == '') & (df.mime_type == '') & 
                     (df.encoding == '') & (df.ext == '') & 
                     (df.name == '')].index
    df = df.drop(file_empty_rows)
    
    return df


DF = create_single_dataframe()


def categorize_programming():
    # Binaries
    mask = ((DF.kind.str.contains('binary')) |
            (DF.kind.str.contains('ELF')) |
            (DF.kind.str.startswith('Mach-O')) |
            (DF.kind.str.contains('architecture=')) |
            (DF.kind.str.contains('object')) |
            (DF.kind == 'Erlang BEAM file') |
            (DF.kind == 'shared library') |
            (DF.kind == 'LLVM IR bitcode') |
            (DF.kind.str.startswith('LLVM bitcode')) |
            (DF.kind.str.startswith('Lua bytecode')) |
            (DF.kind.str.contains(' ROM[ ,]')) |
            (DF.kind.str.contains('compiled')) | # rare but seems to be used for out files
            (DF.kind.str.startswith('text/number,')) |
            (DF.kind.str.startswith('Mac OS X Code Directory')) |
            (DF.kind.str.startswith('MacBinary')) |
            (DF.kind.str.contains('AMOS Basic \w+ bank', regex=True)) |
            (DF.kind == 'Amiga DOS disk') |
            (DF.kind.str.contains('Tape File')) |
            (DF.kind.str.startswith('D64 Image')) |
            (DF.kind.str.startswith('xo65')) |
            (DF.kind.str.contains('Cartridge Image')) |
            (DF.kind.str.contains('[Dd]isk [Ii]mage')) |
            (DF.kind.str.contains('ProDOS')) |
            (DF.kind.str.startswith('AIX core')) |
            (DF.kind.str.startswith('PDP-11 old overlay')) |
            (DF.kind.str.contains('Media descriptor')) |
            (DF.kind.str.contains('[Bb]oot')) |
            (DF.kind.str.startswith('Newton package')) |
            (DF.kind.str.startswith('SymbOS driver')) |
            (DF.kind.str.startswith('Microsoft Visual C library')) |
            (DF.kind.str.startswith('MSVC .')) |
            (DF.kind.str.startswith('OCaml interface file')) |
            (DF.kind.str.startswith('GLS_BINARY_LSB_FIRST')) |
            (DF.kind.str.startswith('Dalvik dex')) |
            (DF.kind == 'AppleDouble encoded Macintosh file') |
            (DF.kind.str.contains('relocatable')) |
            (DF.kind.str.contains('executable')) & 
            ~(DF.kind.str.contains('swap')))
    DF['easy_kind'][mask] = 'binary code'
    DF['major'][mask] = 'code'

    # Source Code
    mask = (((DF.kind.str.contains('program')) & 
            ~(DF.kind.str.contains('database'))) | 
            (DF.kind.str.contains(' source')) |
            (DF.kind.str.startswith('Infocom \(Z-machine')) |
            (DF.kind.str.startswith('Maple worksheet')) |
            (DF.kind == 'Maple something') |
            (DF.kind.str.startswith('Matlab')) |
            (DF.kind.str.startswith('Mathematica')) |
            (DF.kind.str.startswith('Qt C-code'))
            )

    DF['easy_kind'][mask] = 'spec. source code'  # 'source code'
    DF['major'][mask] = 'code'

    # Scripts
    mask = ((DF.kind.str.contains('.* script,', regex=True)) |
            (DF.kind.str.contains('batch')))
    DF['easy_kind'][mask] = 'script'
    DF['major'][mask] = 'code' 

    # Source Code
    mask = ((DF.kind.str.startswith('Non-ISO extended-ASCII text, ')) |
            (DF.kind.str.startswith('ASCII text, ')) |
            (DF.kind == 'ASCII text') |
            (DF.kind.str.startswith('UTF-8 Unicode text, ')) |
            (DF.kind.str.startswith('Little-endian UTF-16 Unicode text')) |
            (DF.kind.str.startswith('Big-endian UTF-16 Unicode text')) |
            (DF.kind.str.startswith('ISO-8859 text')) |
            (DF.kind.str.startswith('UTF-8 Unicode (with BOM) text')) |
            (DF.kind.str.startswith('UTF-8 Unicode text')) |
            (DF.kind.str.startswith('Unicode text')) |
            (DF.kind.str.startswith('Non-ISO extended-ASCII text')) |
            (DF.kind.str.contains('EBCDIC text')) |
            (DF.kind.str.contains('Quake')) |  # For some reason some hundreds of source files are recognized as this
            (DF.kind.str.contains('Dyalog APL')) | # For some reason some hundreds of source files, mainly prose, are recognized as this
            (DF.kind == 'core file (Xenix)') |
            (DF.kind == 'LLVM byte-codes, uncompressed') |
            (DF.kind.str.contains('CLIPPER instruction') & (DF.mime_type == 'application/octet-stream')) |
            (DF.kind.str.startswith('TI-XX Graphing Calculator')) |
            (DF.kind.str.contains('DCL command file')) |
            (DF.kind == 'empty') |  # This is important no?
            (DF.kind == 'very short file (no magic)') |
            (DF.kind.str.startswith('lex description,')) |
            (DF.kind.str.startswith('uuencoded or xxencoded,')) |
            (DF.kind.str.startswith('libtool library file')) |
            (DF.kind.str.startswith('SPEC')) |
            (DF.kind.str.startswith('SMTP mail')) |
            (DF.kind.str.startswith('RFC 822 mail')) |
            (DF.kind.str.startswith('MIME entity')) |
            ((DF.kind.str.startswith('Windows setup INFormation')) & ~((DF.ext == '.inf') | (DF.ext == '.INF') | (DF.ext == '.in') | (DF.ext == '.inf_template'))) |
            ((DF.kind.str.startswith('Apache Avro')) & (DF.mime_type != 'application/octet-stream'))
            )
    DF['easy_kind'][mask] = 'source code'
    DF['major'][mask] = 'code'

    # Build
    mask = ((DF.kind.str.contains('makefile')) |
            (DF.kind.str.contains('make config')) |
            (DF.name.str.contains('build.xml$', regex=True)) | 
            (DF.name == 'ant.xml') |
            (DF.name.str.contains('pom.xml$', regex=True)) | 
            (DF.ext == '.rake') | (DF.ext == '.gradle') |
            (DF.name == 'Gruntfile.js') | (DF.name == 'Gruntfile.coffee') | 
            (DF.ext == '.sbt') | (DF.ext == '.cabal') |
            (DF.name.str.contains('^stack.ya?ml$', regex=True)) |
            (DF.name == 'default.ps1') | (DF.name == 'psake.ps1') |
            (DF.name == '.travis.yml') | (DF.ext == '.ninja') | 
            (DF.ext == '.proj') |
            (DF.name == 'mix.exs') | (DF.name == 'project.clj') | 
            (DF.name == 'gulpfile.js') | (DF.name == 'buildout.cfg') | 
            (DF.ext == '.jam') |
            ((DF.ext == '.boot') & (DF.mime_type.str.startswith('text/'))) |
            (DF.name == 'appveyor.yml') | (DF.ext == '.bazel') |
            (DF.name == 'Jenkinsfile') | (DF.ext == '.jenkins') | 
            (DF.name.str.startswith('codeship-steps')) |
            ((DF.path.str.contains('/.circleci/')) & 
             (DF.name.str.contains('config')) & ((DF.ext == '.yml') | 
                                                 (DF.ext == '.yaml'))) |
            (DF.name == 'azure-pipelines.yml') | (DF.name == '.drone.yml') |
            (DF.name == '.bitrise.yml') | (DF.name == 'bitrise.yml') |
            (DF.name == 'buildkite-pipeline.yml') | 
            (DF.name == 'concourse.yml') |
            ((DF.path.str.contains('/.semaphore/')) & ((DF.ext == '.yml') | 
                                                       (DF.ext == '.yaml'))) |
            (DF.name == 'bitbucket-pipelines.yml')
           )
    DF['easy_kind'][mask] = 'build'
    DF['major'][mask] = 'code'

    # Infrastructure
    mask = ((DF.name == 'Vagrantfile') | (DF.name == 'Dockerfile') |
            (DF.name.str.contains('docker-compose.ya?ml$', regex=True)) |
            (DF.name == 'codeship-services.yml') | (DF.ext == '.tf') |
            (DF.name.str.contains('.tf.json$', regex=True))
           )
    DF['easy_kind'][mask] = 'infrastructure'
    DF['major'][mask] = 'code'


def categorize_data():
    # Images
    mask = ((DF.kind.str.contains('[Ii]mage data')) |
            (DF.kind.str.contains(' icon', regex=True)) |
            (DF.kind.str.startswith('PC bitmap')) |
            (DF.kind.str.startswith('IFF data')) |
            (DF.kind.str.contains('Adobe Photoshop')) |
            (DF.kind.str.startswith('Paint Shop Pro Image File')) |
            (DF.kind.str.startswith('TIM image')) |
            (DF.kind.str.startswith('VISX image')) |
            (DF.kind.str.contains('pixmap image')) |  # text icons
            (DF.kind.str.contains('curses screen image')) |
            (DF.kind.str.startswith('raw G3')) |
            (DF.kind.str.startswith('SVG ')) |
            (DF.kind == 'X11 cursor') |
            (DF.kind.str.startswith('JPEG 2000'))
           )
    DF['easy_kind'][mask] = 'image'
    DF['major'][mask] = 'data'

    # Videos
    mask = ((DF.kind.str.contains('Flash')) | 
            (DF.kind.str.contains('movie')) |
            (DF.kind.str.startswith('FLI animation,')) |
            ((DF.kind.str.contains('ISO Media,')) & 
             ~(DF.mime_type.str.startswith('audio/', na=False))))
    DF['easy_kind'][mask] = 'video'
    DF['major'][mask] = 'data'
    
    # Music
    mask = ((DF.kind.str.contains('song')) |
            (DF.kind.str.contains('[Aa]udio')) |
            (DF.kind.str.contains('[Ss]ound')) |
            (DF.kind.str.contains('MPEG ADTS')) |
            (DF.kind.str.contains('MIDI')) |
            (DF.kind.str.contains('music')) |
            (DF.kind.str.contains('Adlib')) |
            (DF.kind.str.contains('Tracker')) |
            (DF.kind.str.startswith('SysEx File')) |
            (DF.kind.str.startswith('SuperCollider3 Synth')) |
            ((DF.kind.str.contains('ISO Media,')) & (DF.mime_type.str.startswith('audio/')))
            )
    DF['easy_kind'][mask] = 'music'
    DF['major'][mask] = 'data'

    # Fonts
    mask = ((DF.kind.str.contains('[Ff]ont')) |
            (DF.kind.str.startswith('Embedded OpenType')))
    DF['easy_kind'][mask] = 'font'
    DF['major'][mask] = 'data'

    # Markup
    mask = ((DF.kind.str.startswith('XML')) | 
            (DF.kind.str.contains('LaTeX')) |
            (DF.kind.str.startswith('TeX document')) |
            (DF.kind.str.contains('troff ')) |
            (DF.kind.str.startswith('BibTeX text file')) |
            (DF.kind.str.startswith('HTML document')) |
            (DF.kind.str.contains('SGML'))
           )
    DF['easy_kind'][mask] = 'markup'
    DF['major'][mask] = 'data'

    # Configuration
    mask = ((DF.kind.str.startswith('Generic INItialization configuration')) |
            (DF.kind.str.contains('\.INI')) | (DF.kind.str.contains('\.ini')) |
            (DF.ext == '.cfg') | (DF.ext == '.config')
           )
    DF['easy_kind'][mask] = 'configuration'
    DF['major'][mask] = 'data'

    # Databases
    mask = ((DF.mime_type == 'application/x-ms-pdb') |
            (DF.kind.str.contains(' [Dd]atabase', regex=True)) |
            (DF.kind.str.contains('dBase')) | 
            (DF.kind.str.startswith('SQLite')) |
            (DF.kind.str.startswith('MySQL')) |
            (DF.kind.str.startswith('Redis RDB file')) |
            (DF.kind.str.startswith('Berkeley DB')) |
            (DF.kind.str.startswith('Apache Parquet')) |
            ((DF.kind.str.startswith('Apache ORC')) & (DF.mime_type == 'application/octet-stream'))
           )
    DF['easy_kind'][mask] = 'database'
    DF['major'][mask] = 'data'

    # Archives
    mask = ((DF.kind.str.contains('[Aa]rchive')) |
            (DF.kind.str.startswith('StuffIt')) |
            (DF.kind.str.contains('compressed data')))
    DF['easy_kind'][mask] = 'archive'
    DF['major'][mask] = 'data'


    mask = ((DF.kind == 'OpenDocument Drawing') |
            (DF.kind == 'OpenDocument Spreadsheet') |
            (DF.kind == 'OpenDocument Presentation') |
            (DF.kind == 'OpenDocument Template') |
            (DF.kind.str.startswith('Microsoft OOXML')) |
            (DF.kind.str.contains('Microsoft Excel 2007+')) |
            (DF.kind.str.contains('Microsoft PowerPoint 2007+')) |
            (DF.kind.str.startswith('KiCad')) |
            (DF.kind.str.contains('AppleWorks')) |
            (DF.kind == 'Adobe InDesign Document') |
            (DF.kind.str.contains('Draw')) |
            (DF.kind.str.contains('AutoDesk AutoCAD')) |
            (DF.kind == 'Freemind document') |
            (DF.kind.str.startswith('FrameMaker document')) |
            (DF.kind.str.startswith('3D Studio model'))
           )
    DF['easy_kind'][mask] = 'document'
    DF['major'][mask] = 'data'

 
    mask = ((DF['easy_kind'] == 'source code') &
            (DF.name.str.startswith('.')))
    DF['easy_kind'][mask] = 'configuration'
    DF['major'][mask] = 'data'

    # Data
    mask = ( # (DF.easy_kind == '') &
            ((pd.isna(DF.easy_kind) & (DF.kind.str.contains(' data'))) |
             ((DF.kind == 'data')) |
             (DF.kind.str.startswith('Vim swap file')) |
             (DF.kind.str.contains('diff output,')) |
             (DF.kind.str.startswith('bsdiff')) |
             (DF.kind.str.startswith('FIG image text')) |
             (DF.kind.str.startswith('Exuberant Ctags tag file,')) |
             (DF.kind.str.contains('GCC gc\w+ coverage', regex=True)) |
             (DF.kind == 'data') |
             (DF.kind.str.startswith('news or mail')) |
             (DF.kind.str.startswith('sendmail m4')) |
             (DF.kind.str.contains('capture file')) |
             (DF.kind.str.startswith('ESRI Shapefile')) |
             (DF.kind.str.startswith('PaintShop Pro color palette,')) |  # TODO: Check if this is perhaps more configuration data
             (DF.kind.str.contains('MS Windows .*[Hh]elp', regex=True)) |
             (DF.kind.str.startswith('MS Windows 95 Internet shortcut')) |
             (DF.kind.str.startswith('GNU gettext message catalogue,')) |  # TODO: seems to misclassify a tiny amount of files
             (DF.kind.str.startswith('GNU message catalog')) |
             (DF.kind.str.startswith('Qt Translation file')) |
             (DF.kind.str.startswith('Qt Resource Collection')) |
             (DF.kind.str.startswith('Apple Desktop Services Store')) |  # .DS_Store files
             ((DF.kind.str.startswith('Windows setup INFormation')) & ((DF.ext == '.inf') | (DF.ext == '.INF') | (DF.ext == '.in') | (DF.ext == '.inf_template'))) |
             (DF.kind.str.startswith('Unreal Engine Package,')) |
             (DF.kind == 'vCalendar calendar file') |
             (DF.kind.str.startswith('M3U playlist')) |
             (DF.kind.str.startswith('Apache Hadoop Sequence')) |
             ((DF.kind.str.startswith('Apache Avro')) & (DF.mime_type == 'application/octet-stream')) |  # Binary files with JSON https://en.wikipedia.org/wiki/Apache_Avro
             (DF.kind.str.startswith('Alias Maya Ascii File')) |
             (DF.kind.str.startswith('Git index')) |  # TODO: most of them are used in test cases. Is this purpose or artifact?
             (DF.kind.str.startswith('Microsoft Rosyln C# debugging symbols')) |
             (DF.kind == 'BitTorrent file') |
             (DF.kind.str.startswith('PEM certificate')) |  # Should certificates and keys become their own category?
             (DF.kind.str.contains('private key')) |
             (DF.kind.str.contains('public key')) |
             (DF.kind.str.startswith('DER Encoded Certificate')) |
             (DF.kind.str.startswith('Java KeyStore')) |
             (DF.kind.str.startswith('PGP'))
            ))
    DF['easy_kind'][mask] = 'app data'
    DF['major'][mask] = 'data'


def categorize_prose():
    
    mask = (
        # These documents used to be in the data section under document but I 
        # moved them now to prose
        (DF.kind.str.startswith('Composite Document')) |
        (DF.kind.str.startswith('PDF document')) |
        (DF.kind.str.contains('Postscript')) |
        (DF.kind.str.startswith('PostScript document')) |
        (DF.kind.str.contains('WordPerfect')) |
        (DF.kind.str.contains('Microsoft Word 2007+')) |
        (DF.kind == 'OpenDocument Text') |
        (DF.kind == 'LyX document text') |
        (DF.kind.str.startswith('TeX DVI file')) |
        (DF.kind == 'EPUB document') |
        # AsciiDoc
        ((DF.ext == '.asciidoc') | (DF.ext == '.adoc') | (DF.ext == '.asc"')) |
        # Creole
        (DF.ext == '.creole') |
        # Gettext Catalog
        ((DF.ext == '.po') | (DF.ext == '.pot')) |
        # Markdown
        ((DF.ext == '.md') | (DF.ext == '.markdown') | (DF.ext == '.mdown"') | 
         (DF.ext == '.mdwn') | (DF.ext == '.mdx') | (DF.ext == '.mkd"') | 
         (DF.ext == '.mkdn') | (DF.ext == '.mkdown') | (DF.ext == '.ronn"') | 
         (DF.ext == '.workbook"') |
         (DF.name == 'contents.lr')
        ) |
        # MediaWiki
        ((DF.ext == '.mediawiki') | (DF.ext == '.wiki')) |
        # Org
        (DF.ext == '.org') |
        # Pod
        ((DF.ext == '.pod') | (DF.ext == '.pod6')) |
        # RDoc
        (DF.ext == '.rdoc') |
        # RMarkdown
        (DF.ext == '.rmd') |
        # Texinfo
        ((DF.ext == '.texinfo') | (DF.ext == '.texi') | (DF.ext == '.txi"')) |
        # Text
        ((DF.ext == '.txt') | (DF.ext == '.fr') | (DF.ext == '.nb"') | 
         (DF.ext == '.ncl') | (DF.ext == '.no') |
         (DF.name == 'COPYING') | (DF.name == 'COPYING.regex') | 
         (DF.name == 'COPYRIGHT.regex') | (DF.name == 'FONTLOG') | 
         (DF.name == 'INSTALL') | (DF.name == 'INSTALL.mysql') | 
         (DF.name == 'LICENSE') | (DF.name == 'LICENSE.mysql') | 
         (DF.name == 'NEWS') | (DF.name == 'README.1ST') | 
         (DF.name == 'README.me') | (DF.name == 'READ.ME') | 
         (DF.name == 'README.mysql') |
         (DF.name == 'click.me') | (DF.name == 'delete.me') |
         (DF.name == 'go.mod') | (DF.name == 'go.sum') | 
         (DF.name == 'keep.me') | (DF.name == 'read.me') | 
         (DF.name == 'readme.1st') | (DF.name == 'test.me') | 
         # My extensions based on
         (DF.name == 'README') | (DF.name == 'OWNERS') | 
         (DF.name == 'AUTHORS') | (DF.name == 'NOTICE') | (DF.name == 'TODO') |
         (DF.name == 'TODO') | (DF.name == 'VERSION') | 
         (DF.name == 'CONTRIBUTORS') | (DF.name == 'PATENTS') |
         (DF.name == 'copyright') | (DF.name == 'MAINTAINERS') |
         (DF.name == 'CHANGELOG') | (DF.name == 'changelog') |
         (DF.name == 'CHANGES') | (DF.name == 'Changes') | 
         (DF.name == 'ChangeLog') | (DF.name == 'description')
        ) |
        # Textile
        (DF.ext == '.textile') |
        # reStructuredText
        ((DF.ext == '.rst') | (DF.ext == '.rest') | (DF.ext == '.rest.txt"') | 
         (DF.ext == '.rst.txt')) |
        # Email -> is a data item in linguist
        (DF.ext == '.eml')
    )
    DF['easy_kind'][mask] = 'prose'
    DF['major'][mask] = 'documentation'
    # (DF.kind.str.startswith('Perl POD'))  # TODO: perhaps move it down to prose?

    mask = ((DF.name.str.contains('LICENSE')) | 
            (DF.name.str.contains('LICENSE')) |
            (DF.name.str.contains('PATENTS')) | 
            (DF.name.str.contains('COPYRIGHT')))

    DF['easy_kind'][mask] = 'legalese'
    DF['major'][mask] = 'documentation'


def categorize_other():
    mask = (DF['easy_kind'] == '')
    DF['easy_kind'][mask] = 'other'
    DF['major'][mask] = 'other'


def catregorize_linuguist():
    """Based on the linguist database but extended. For example with upper case
    versions of the extensions. My extensions are marked below.

    After an initial run of the non-extended version, I ran:
    In [1]: Counter(DF[pd.isna(DF.ling)].ext.values).most_common(180)
    Out[1]:
    [(nan, 526608),
    ('.F', 77167),
    ('.glif', 69543),
    ('.i', 41324),
    ('.out', 39029),
    ('.F90', 36156),
    ('.test', 36066),
    ('.dat', 34083),
    """

    DF['ling'] = np.nan
    # This takes all the languages from languages.yml, which are marked as `prose`
    mask_linguist_language_prose_yml = (
        # AsciiDoc
        ((DF.ext == '.asciidoc') | (DF.ext == '.adoc') | (DF.ext == '.asc"')) |
        # Creole
        (DF.ext == '.creole') |
        # Gettext Catalog
        ((DF.ext == '.po') | (DF.ext == '.pot')) |
        # Markdown
        ((DF.ext == '.md') | (DF.ext == '.markdown') | (DF.ext == '.mdown"') | 
         (DF.ext == '.mdwn') | (DF.ext == '.mdx') | (DF.ext == '.mkd"') | 
         (DF.ext == '.mkdn') | (DF.ext == '.mkdown') | (DF.ext == '.ronn"') | 
         (DF.ext == '.workbook"') |
         (DF.name == 'contents.lr')
        ) |
        # MediaWiki
        ((DF.ext == '.mediawiki') | (DF.ext == '.wiki')) |
        # Org
        (DF.ext == '.org') |
        # Pod
        ((DF.ext == '.pod') | (DF.ext == '.pod6')) |
        # RDoc
        (DF.ext == '.rdoc') |
        # RMarkdown
        (DF.ext == '.rmd') |
        # Texinfo
        ((DF.ext == '.texinfo') | (DF.ext == '.texi') | (DF.ext == '.txi"')) |
        # Text
        ((DF.ext == '.txt') | (DF.ext == '.fr') | (DF.ext == '.nb"') | 
         (DF.ext == '.ncl') | (DF.ext == '.no') |
         (DF.name == 'COPYING') | (DF.name == 'COPYING.regex') | 
         (DF.name == 'COPYRIGHT.regex') | (DF.name == 'FONTLOG') | 
         (DF.name == 'INSTALL') | (DF.name == 'INSTALL.mysql') | 
         (DF.name == 'LICENSE') | (DF.name == 'LICENSE.mysql') | 
         (DF.name == 'NEWS') | (DF.name == 'README.1ST') | 
         (DF.name == 'README.me') | (DF.name == 'README.mysql') |
         (DF.name == 'click.me') | (DF.name == 'delete.me') |
         (DF.name == 'go.mod') | (DF.name == 'go.sum') | 
         (DF.name == 'keep.me') | (DF.name == 'read.me') | 
         (DF.name == 'readme.1st') | (DF.name == 'test.me') | 
         # My extensions based on
         (DF.name == 'README') | (DF.name == 'OWNERS') | 
         (DF.name == 'AUTHORS') | (DF.name == 'NOTICE') | (DF.name == 'TODO') |
         (DF.name == 'TODO') | (DF.name == 'VERSION') | 
         (DF.name == 'CONTRIBUTORS') | (DF.name == 'PATENTS') |
         (DF.name == 'copyright') | (DF.name == 'MAINTAINERS') |
         (DF.name == 'CHANGELOG') | (DF.name == 'changelog') |
         (DF.name == 'CHANGES') | (DF.name == 'Changes') | 
         (DF.name == 'ChangeLog') | (DF.name == 'description')
        ) |
        # Textile
        (DF.ext == '.textile') |
        # reStructuredText
        ((DF.ext == '.rst') | (DF.ext == '.rest') | (DF.ext == '.rest.txt"') | 
         (DF.ext == '.rst.txt')) # |
    )
    mask = (mask_linguist_language_prose_yml)
    DF['ling'][mask] = 'prose'

    mask_linguist_language_data_yml = (
        (DF.ext == '.abnf') | (DF.ext == '.asn') | (DF.ext == '.asn1') | 
        (DF.ext == '.afm') | (DF.ext == '.OutJob') | (DF.ext == '.PcbDoc') | 
        (DF.ext == '.PrjPCB') | (DF.ext == '.SchDoc') | 
        (DF.ext == '.apacheconf') | (DF.ext == '.vhost') | 
        (DF.ext == '.c-objdump') | (DF.ext == '.dae') | (DF.ext == '.cson') | 
        (DF.ext == '.csv') | (DF.ext == '.cabal') | (DF.ext == '.conllu') | 
        (DF.ext == '.conll') | (DF.ext == '.cppobjdump') | 
        (DF.ext == '.c++-objdump') | (DF.ext == '.c++objdump') | 
        (DF.ext == '.cpp-objdump') | (DF.ext == '.cxx-objdump') | 
        (DF.ext == '.d-objdump') | (DF.ext == '.zone') | (DF.ext == '.arpa') | 
        (DF.ext == '.darcspatch') | (DF.ext == '.dpatch') | 
        (DF.ext == '.diff') | (DF.ext == '.patch') | (DF.ext == '.ebnf') | 
        (DF.ext == '.eml') | (DF.ext == '.mbox') | (DF.ext == '.sch') | 
        (DF.ext == '.brd') | (DF.ext == '.eb') | (DF.ext == '.epj') | 
        (DF.ext == '.edc') | (DF.ext == '.flf') | (DF.ext == '.for') | 
        # Extended Fonts
        (DF.ext == '.glif') | (DF.ext == '.tga') | (DF.ext == '.gz') | 
        (DF.ext == '.strings') | (DF.ext == '.result') | (DF.ext == '.conf') |
        (DF.ext == '.wav') | (DF.ext == '.pbxproj') | (DF.ext == '.dtd') |
        (DF.ext == '.ogg') | (DF.ext == '.pdf') | (DF.ext == '.pem') |
        (DF.ext == '.vtx') | (DF.ext == '.inp') | (DF.ext == '.xcscheme') |
        (DF.ext == '.ttf') | (DF.ext == '.glyph') | (DF.ext == '.pixelshader') |
        (DF.ext == '.frames') | (DF.ext == '.svn-base') | (DF.ext == '.tmpl') |
        (DF.ext == '.expectf') | (DF.ext == '.rc') | (DF.ext == '.dds') |
        (DF.ext == '.after') | (DF.ext == '.vmt') | (DF.ext == '.xz') | 
        (DF.ext == '.woff') | (DF.ext == '.woff2') | 
        (DF.ext == '.xcworkspacedata') | (DF.ext == '.vcproj') | 
        (DF.ext == '.xcconfig') | (DF.ext == '.ilproj') | 
        (DF.ext == '.parquet') | (DF.ext == '.md5') | (DF.ext == '.db') |
        (DF.ext == '.tt') | (DF.ext == '.wavetable') | (DF.ext == '.pbtxt') |
        (DF.ext == '.nib') |
        
        # both part of the mercurial version history
        ((DF.path.str.contains('/\.hg/')) & (DF.ext == '.i')) |
        ((DF.path.str.contains('/\.hg/')) & (DF.ext == '.d')) |

        (DF.ext == '.eam.fs') | (DF.ext == '.gn') | (DF.ext == '.gni') | 
        (DF.ext == '.gbr') | (DF.ext == '.gbl') | (DF.ext == '.gbo') | 
        (DF.ext == '.gbp') | (DF.ext == '.gbs') | (DF.ext == '.gko') | 
        (DF.ext == '.gml') | (DF.ext == '.gpb') | (DF.ext == '.gpt') | 
        (DF.ext == '.gtl') | (DF.ext == '.gto') | (DF.ext == '.gtp') | 
        (DF.ext == '.gts') | (DF.ext == '.gitconfig') | (DF.ext == '.bdf') | 
        (DF.ext == '.gradle') | (DF.ext == '.gml') | (DF.ext == '.graphql') | 
        (DF.ext == '.gql') | (DF.ext == '.graphqls') | (DF.ext == '.dot') | 
        (DF.ext == '.gv') | (DF.ext == '.cfg') | (DF.ext == '.http') | 
        (DF.ext == '.hxml') | (DF.ext == '.ini') | (DF.ext == '.cfg') | 
        (DF.ext == '.lektorproject') | (DF.ext == '.prefs') | 
        (DF.ext == '.pro') | (DF.ext == '.properties') | (DF.ext == '.irclog') |
        (DF.ext == '.weechatlog') | (DF.ext == '.gitignore') | 
        (DF.ext == '.json') | (DF.ext == '.avsc') | (DF.ext == '.geojson') | 
        (DF.ext == '.gltf') | (DF.ext == '.har') | (DF.ext == '.ice') | 
        (DF.ext == '.JSON-tmLanguage') | (DF.ext == '.jsonl') | 
        (DF.ext == '.mcmeta') | (DF.ext == '.tfstate') | 
        (DF.ext == '.tfstate.backup') | (DF.ext == '.topojson') | 
        (DF.ext == '.webapp') | (DF.ext == '.webmanifest') | (DF.ext == '.yy') |
        (DF.ext == '.yyp') | (DF.ext == '.sublime-build') | 
        (DF.ext == '.sublime-commands') | (DF.ext == '.sublime-completions') |
        (DF.ext == '.sublime-keymap') | (DF.ext == '.sublime-macro') | 
        (DF.ext == '.sublime-menu') | (DF.ext == '.sublime-mousemap') | 
        (DF.ext == '.sublime-project') | (DF.ext == '.sublime-settings') | 
        (DF.ext == '.sublime-theme') | (DF.ext == '.sublime-workspace') | 
        (DF.ext == '.sublime_metrics') | (DF.ext == '.sublime_session') | 
        (DF.ext == '.json5') | (DF.ext == '.jsonld') | 
        (DF.ext == '.properties') | (DF.ext == '.kicad_pcb') | 
        (DF.ext == '.kicad_mod') | (DF.ext == '.kicad_wks') | 
        (DF.ext == '.brd') | (DF.ext == '.sch') | (DF.ext == '.asy') | 
        (DF.ext == '.ld') | (DF.ext == '.lds') | (DF.ext == '.x') | 
        (DF.ext == '.mod') | (DF.ext == '.nl') | (DF.ext == '.nginxconf') | 
        (DF.ext == '.vhost') | (DF.ext == '.ninja') | (DF.ext == '.objdump') | 
        (DF.ext == '.plist') | (DF.ext == '.fea') | (DF.ext == '.pkl') | 
        (DF.ext == '.proto') | (DF.ext == '.asc') | (DF.ext == '.pub') | 
        (DF.ext == '.pd') | (DF.ext == '.pytb') | (DF.ext == '.spec') | 
        (DF.ext == '.raw') | (DF.ext == '.regexp') | (DF.ext == '.regex') | 
        (DF.ext == '.sparql') | (DF.ext == '.rq') | (DF.ext == '.sql') | 
        (DF.ext == '.cql') | (DF.ext == '.ddl') | (DF.ext == '.inc') | 
        (DF.ext == '.mysql') | (DF.ext == '.prc') | (DF.ext == '.tab') | 
        (DF.ext == '.udf') | (DF.ext == '.viw') | (DF.ext == '.ston') | 
        (DF.ext == '.svg') | (DF.ext == '.sfd') | (DF.ext == '.srt') | 
        (DF.ext == '.toml') | (DF.ext == '.ttl') | (DF.ext == '.tl') | 
        (DF.ext == '.anim') | (DF.ext == '.asset') | (DF.ext == '.mat') | 
        (DF.ext == '.meta') | (DF.ext == '.prefab') | (DF.ext == '.unity') | 
        (DF.ext == '.mtl') | (DF.ext == '.obj') | (DF.ext == '.owl') | 
        (DF.ext == '.vtt') | (DF.ext == '.reg') | (DF.ext == '.toc') | 
        (DF.ext == '.xbm') | (DF.ext == '.xpm') | (DF.ext == '.pm') | 
        (DF.ext == '.xml') | (DF.ext == '.adml') | (DF.ext == '.admx') | 
        (DF.ext == '.ant') | (DF.ext == '.axml') | (DF.ext == '.builds') | 
        (DF.ext == '.ccproj') | (DF.ext == '.ccxml') | (DF.ext == '.clixml') | 
        (DF.ext == '.cproject') | (DF.ext == '.cscfg') | (DF.ext == '.csdef') | 
        (DF.ext == '.csl') | (DF.ext == '.csproj') | (DF.ext == '.ct') | 
        (DF.ext == '.depproj') | (DF.ext == '.dita') | (DF.ext == '.ditamap') | 
        (DF.ext == '.ditaval') | (DF.ext == '.dll.config') | 
        (DF.ext == '.dotsettings') | (DF.ext == '.filters') | 
        (DF.ext == '.fsproj') | (DF.ext == '.fxml') | (DF.ext == '.glade') | 
        (DF.ext == '.gml') | (DF.ext == '.gmx') | (DF.ext == '.grxml') | 
        (DF.ext == '.iml') | (DF.ext == '.ivy') | (DF.ext == '.jelly') | 
        (DF.ext == '.jsproj') | (DF.ext == '.kml') | (DF.ext == '.launch') | 
        (DF.ext == '.mdpolicy') | (DF.ext == '.mjml') | (DF.ext == '.mm') | 
        (DF.ext == '.mod') | (DF.ext == '.mxml') | (DF.ext == '.natvis') | 
        (DF.ext == '.ncl') | (DF.ext == '.ndproj') | (DF.ext == '.nproj') | 
        (DF.ext == '.nuspec') | (DF.ext == '.odd') | (DF.ext == '.osm') | 
        (DF.ext == '.pkgproj') | (DF.ext == '.pluginspec') | 
        (DF.ext == '.proj') | (DF.ext == '.props') | (DF.ext == '.ps1xml') | 
        (DF.ext == '.psc1') | (DF.ext == '.pt') | (DF.ext == '.rdf') | 
        (DF.ext == '.resx') | (DF.ext == '.rss') | (DF.ext == '.sch') | 
        (DF.ext == '.scxml') | (DF.ext == '.sfproj') | (DF.ext == '.shproj') | 
        (DF.ext == '.srdf') | (DF.ext == '.storyboard') | 
        (DF.ext == '.sublime-snippet') | (DF.ext == '.targets') | 
        (DF.ext == '.tml') | (DF.ext == '.ts') | (DF.ext == '.tsx') | 
        (DF.ext == '.ui') | (DF.ext == '.urdf') | (DF.ext == '.ux') | 
        (DF.ext == '.vbproj') | (DF.ext == '.vcxproj') | 
        (DF.ext == '.vsixmanifest') | (DF.ext == '.vssettings') | 
        (DF.ext == '.vstemplate') | (DF.ext == '.vxml') | 
        (DF.ext == '.wixproj') | (DF.ext == '.workflow') | (DF.ext == '.wsdl') |
        (DF.ext == '.wsf') | (DF.ext == '.wxi') | (DF.ext == '.wxl') | 
        (DF.ext == '.wxs') | (DF.ext == '.x3d') | (DF.ext == '.xacro') | 
        (DF.ext == '.xaml') | (DF.ext == '.xib') | (DF.ext == '.xlf') | 
        (DF.ext == '.xliff') | (DF.ext == '.xmi') | (DF.ext == '.xml.dist') | 
        (DF.ext == '.xproj') | (DF.ext == '.xsd') | (DF.ext == '.xspec') | 
        (DF.ext == '.xul') | (DF.ext == '.zcml') | (DF.ext == '.plist') | 
        (DF.ext == '.stTheme') | (DF.ext == '.tmCommand') | 
        (DF.ext == '.tmLanguage') | (DF.ext == '.tmPreferences') | 
        (DF.ext == '.tmSnippet') | (DF.ext == '.tmTheme') | 
        (DF.ext == '.xsp-config') | (DF.ext == '.xsp.metadata') | 
        (DF.ext == '.yml') | (DF.ext == '.mir') | (DF.ext == '.reek') | 
        (DF.ext == '.rviz') | (DF.ext == '.sublime-syntax') | 
        (DF.ext == '.syntax') | (DF.ext == '.yaml') | 
        (DF.ext == '.yaml-tmlanguage') | (DF.ext == '.yml.mysql') | 
        (DF.ext == '.yang') | (DF.ext == '.desktop') | 
        (DF.ext == '.desktop.in') | (DF.ext == '.edn') | (DF.ext == '.nanorc') |
        (DF.ext == '.png') | (DF.ext == '.gif') | (DF.ext == '.jpg') | 
        (DF.ext == '.PNG') | (DF.ext == '.JPG') | (DF.ext == '.jpeg') | 
        (DF.ext == '.svg') | (DF.ext == '.bmp') | (DF.ext == '.BMP') | 
        (DF.ext == '.ico') | (DF.ext == '.xcf') | (DF.ext == '.log') | 
        (DF.ext == '.zip') | (DF.ext == '.tar') | (DF.ext == '.lst') |
        # Filenames
        (DF.name == 'ant.xml') | (DF.name == 'build.xml') | 
        (DF.name == '.htaccess') | (DF.name == 'apache2.conf') | 
        (DF.name == 'httpd.conf') | (DF.name == 'cabal.config') | 
        (DF.name == 'cabal.project') | (DF.name == 'firestore.rules') | 
        (DF.name == '.editorconfig') | (DF.name == '.gn') | 
        (DF.name == '.gitattributes') | (DF.name == '.gitconfig') | 
        (DF.name == '.gitmodules') | (DF.name == 'haproxy.cfg') | 
        (DF.name == 'buildozer.spec') | (DF.name == '.atomignore') | 
        (DF.name == '.babelignore') | (DF.name == '.bzrignore') | 
        (DF.name == '.coffeelintignore') | (DF.name == '.cvsignore') | 
        (DF.name == '.dockerignore') | (DF.name == '.eslintignore') | 
        (DF.name == '.gitignore') | (DF.name == '.nodemonignore') | 
        (DF.name == '.npmignore') | (DF.name == '.prettierignore') | 
        (DF.name == '.stylelintignore') | (DF.name == '.vscodeignore') | 
        (DF.name == 'gitignore-global') | (DF.name == 'gitignore_global') | 
        (DF.name == '.arcconfig') | (DF.name == '.htmlhintrc') | 
        (DF.name == '.tern-config') | (DF.name == '.tern-project') | 
        (DF.name == '.watchmanconfig') | (DF.name == 'composer.lock') | 
        (DF.name == 'mcmod.info') | (DF.name == '.babelrc') | 
        (DF.name == '.eslintrc.json') | (DF.name == '.jscsrc') | 
        (DF.name == '.jshintrc') | (DF.name == '.jslintrc') | 
        (DF.name == 'jsconfig.json') | 
        (DF.name == 'language-configuration.json') | 
        (DF.name == 'tsconfig.json') | (DF.name == 'fp-lib-table') | 
        (DF.name == 'ld.script') | (DF.name == 'pom.xml') | 
        (DF.name == 'nginx.conf') | (DF.name == 'ssh-config') | 
        (DF.name == 'ssh_config') | (DF.name == 'sshconfig') | 
        (DF.name == 'sshconfig.snip') | (DF.name == 'sshd-config') | 
        (DF.name == 'sshd_config') | (DF.name == 'Cargo.lock') | 
        (DF.name == 'Gopkg.lock') | (DF.name == 'encodings.dir') | 
        (DF.name == 'fonts.alias') | (DF.name == 'fonts.dir') | 
        (DF.name == 'fonts.scale') | (DF.name == '.XCompose') | 
        (DF.name == 'XCompose') | (DF.name == 'xcompose') | 
        (DF.name == '.classpath') | (DF.name == '.cproject') | 
        (DF.name == '.project') | (DF.name == 'App.config') | 
        (DF.name == 'NuGet.config') | (DF.name == 'Settings.StyleCop') | 
        (DF.name == 'Web.Debug.config') | (DF.name == 'Web.Release.config') | 
        (DF.name == 'Web.config') | (DF.name == 'packages.config') | 
        (DF.name == '.clang-format') | (DF.name == '.clang-tidy') | 
        (DF.name == '.gemrc') | (DF.name == 'glide.lock') | 
        (DF.name == '.nanorc') | (DF.name == 'nanorc') | 
        (DF.name == 'redis.conf') | (DF.name == 'cscope.files') |
        # Extended file names
        (DF.name == '.eslintrc') | (DF.name == 'Kconfig') | 
        (DF.name == '.gitkeep') | (DF.name == '.keep') | 
        (DF.name == '.flowconfig') | (DF.name == '.depend') | 
        (DF.name == '.DS_Store')


    )
    mask = (mask_linguist_language_data_yml)
    DF['ling'][mask] = 'data'

    mask_linguist_language_markup_yml = (
        (DF.ext == '.apib') | (DF.ext == '.bib') | (DF.ext == '.blade') | 
        (DF.ext == '.blade.php') | (DF.ext == '.css') | (DF.ext == '.soy') | 
        (DF.ext == '.ejs') | (DF.ext == '.html') | (DF.ext == '.htm') | 
        (DF.ext == '.html.hl') | (DF.ext == '.inc') | (DF.ext == '.st') | 
        (DF.ext == '.xht') | (DF.ext == '.xhtml') | (DF.ext == '.jinja') | 
        (DF.ext == '.jinja2') | (DF.ext == '.mustache') | (DF.ext == '.njk') | 
        (DF.ext == '.ecr') | (DF.ext == '.eex') | (DF.ext == '.erb') | 
        (DF.ext == '.erb.deface') | (DF.ext == '.phtml') | 
        (DF.ext == '.cshtml') | (DF.ext == '.razor') | (DF.ext == '.haml') | 
        (DF.ext == '.haml.deface') | (DF.ext == '.handlebars') | 
        (DF.ext == '.hbs') | (DF.ext == '.ipynb') | (DF.ext == '.kit') | 
        (DF.ext == '.latte') | (DF.ext == '.less') | (DF.ext == '.liquid') | 
        (DF.ext == '.mtml') | (DF.ext == '.marko') | (DF.ext == '.mask') | 
        (DF.ext == '.pic') | (DF.ext == '.chem') | (DF.ext == '.pcss') | 
        (DF.ext == '.ps') | (DF.ext == '.eps') | (DF.ext == '.pfa') | 
        (DF.ext == '.jade') | (DF.ext == '.pug') | (DF.ext == '.raml') | 
        (DF.ext == '.rhtml') | (DF.ext == '.rnh') | (DF.ext == '.rno') | 
        (DF.ext == '.rtf') | (DF.ext == '.roff') | (DF.ext == '.1') | 
        (DF.ext == '.1in') | (DF.ext == '.1m') | (DF.ext == '.1x') | 
        (DF.ext == '.2') | (DF.ext == '.3') | (DF.ext == '.3in') | 
        (DF.ext == '.3m') | (DF.ext == '.3p') | (DF.ext == '.3pm') | 
        (DF.ext == '.3qt') | (DF.ext == '.3x') | (DF.ext == '.4') | 
        (DF.ext == '.5') | (DF.ext == '.6') | (DF.ext == '.7') | 
        (DF.ext == '.8') | (DF.ext == '.9') | (DF.ext == '.l') | 
        (DF.ext == '.man') | (DF.ext == '.mdoc') | (DF.ext == '.me') | 
        (DF.ext == '.ms') | (DF.ext == '.n') | (DF.ext == '.nr') | 
        (DF.ext == '.rno') | (DF.ext == '.tmac') | (DF.ext == '.1') | 
        (DF.ext == '.1in') | (DF.ext == '.1m') | (DF.ext == '.1x') | 
        (DF.ext == '.2') | (DF.ext == '.3') | (DF.ext == '.3in') | 
        (DF.ext == '.3m') | (DF.ext == '.3p') | (DF.ext == '.3pm') | 
        (DF.ext == '.3qt') | (DF.ext == '.3x') | (DF.ext == '.4') | 
        (DF.ext == '.5') | (DF.ext == '.6') | (DF.ext == '.7') | 
        (DF.ext == '.8') | (DF.ext == '.9') | (DF.ext == '.man') | 
        (DF.ext == '.mdoc') | (DF.ext == '.scss') | (DF.ext == '.srt') | 
        (DF.ext == '.sass') | (DF.ext == '.scaml') | (DF.ext == '.slim') | 
        (DF.ext == '.styl') | (DF.ext == '.sss') | (DF.ext == '.svelte') | 
        (DF.ext == '.tex') | (DF.ext == '.aux') | (DF.ext == '.bbx') | 
        (DF.ext == '.cbx') | (DF.ext == '.cls') | (DF.ext == '.dtx') | 
        (DF.ext == '.ins') | (DF.ext == '.lbx') | (DF.ext == '.ltx') | 
        (DF.ext == '.mkii') | (DF.ext == '.mkiv') | (DF.ext == '.mkvi') | 
        (DF.ext == '.sty') | (DF.ext == '.toc') | (DF.ext == '.tea') | 
        (DF.ext == '.twig') | (DF.ext == '.vue') | (DF.ext == '.yasnippet') |
        (DF.ext == '.yaws') |
        # Filenames
        (DF.name == 'eqnrc') | (DF.name == 'mmn') | (DF.name == 'mmt') | 
        (DF.name == 'troffrc') | (DF.name == 'troffrc-end')
    )
    mask = (mask_linguist_language_markup_yml)
    DF['ling'][mask] = 'markup'

    mask_linguist_language_programming_yml = (
        (DF.ext == '.bsl') | (DF.ext == '.os') | (DF.ext == '.abap') | 
        (DF.ext == '.asc') | (DF.ext == '.ash') | (DF.ext == '.ampl') | 
        (DF.ext == '.mod') | (DF.ext == '.g4') | (DF.ext == '.apl') | 
        (DF.ext == '.dyalog') | (DF.ext == '.asp') | (DF.ext == '.asax') | 
        (DF.ext == '.ascx') | (DF.ext == '.ashx') | (DF.ext == '.asmx') | 
        (DF.ext == '.aspx') | (DF.ext == '.axd') | (DF.ext == '.dats') | 
        (DF.ext == '.hats') | (DF.ext == '.sats') | (DF.ext == '.as') | 
        (DF.ext == '.adb') | (DF.ext == '.ada') | (DF.ext == '.ads') | 
        (DF.ext == '.gpr') | (DF.ext == '.agda') | (DF.ext == '.als') | 
        (DF.ext == '.as') | (DF.ext == '.angelscript') | (DF.ext == '.cls') | 
        (DF.ext == '.agc') | (DF.ext == '.applescript') | (DF.ext == '.scpt') | 
        (DF.ext == '.arc') | (DF.ext == '.aj') | (DF.ext == '.asm') | 
        (DF.ext == '.a51') | (DF.ext == '.inc') | (DF.ext == '.nasm') | 
        (DF.ext == '.S') | (DF.ext == '.asy') | (DF.ext == '.aug') | 
        (DF.ext == '.ahk') | (DF.ext == '.ahkl') | (DF.ext == '.au3') | 
        (DF.ext == '.awk') | (DF.ext == '.auk') | (DF.ext == '.gawk') | 
        (DF.ext == '.mawk') | (DF.ext == '.nawk') | (DF.ext == '.bal') | 
        (DF.ext == '.bat') | (DF.ext == '.cmd') | (DF.ext == '.befunge') | 
        (DF.ext == '.bison') | (DF.ext == '.bb') | (DF.ext == '.bb') | 
        (DF.ext == '.decls') | (DF.ext == '.bmx') | (DF.ext == '.bsv') | 
        (DF.ext == '.boo') | (DF.ext == '.b') | (DF.ext == '.bf') | 
        (DF.ext == '.brs') | (DF.ext == '.c') | (DF.ext == '.C') | 
        (DF.ext == '.cats') | (DF.ext == '.h') | (DF.ext == '.H') | 
        (DF.ext == '.idc') | (DF.ext == '.cs') | (DF.ext == '.cake') | 
        (DF.ext == '.csx') | (DF.ext == '.cpp') | (DF.ext == '.c++') | 
        (DF.ext == '.cc') | (DF.ext == '.cp') | (DF.ext == '.cxx') | 
        # Extended C++ and programming
        (DF.ext == '.class') | (DF.ext == '.jar') | (DF.ext == '.sln') |
        (DF.ext == '.so') | (DF.ext == '.bin') | (DF.ext == '.in') | 
        # .src might move some latex files, which would be markup to here...
        (DF.ext == '.dts') | (DF.ext == '.src') | (DF.ext == '.ASM') |
        (DF.ext == '.beam') | (DF.ext == '.idl') | (DF.ext == '.il') |
        

        (DF.ext == '.h') | (DF.ext == '.h++') | (DF.ext == '.hh') | 
        (DF.ext == '.hpp') | (DF.ext == '.hxx') | (DF.ext == '.inc') | 
        (DF.ext == '.inl') | (DF.ext == '.ino') | (DF.ext == '.ipp') | 
        (DF.ext == '.re') | (DF.ext == '.tcc') | (DF.ext == '.tpp') | 
        (DF.ext == '.def') | (DF.ext == '.chs') | (DF.ext == '.clp') | 
        (DF.ext == '.cmake') | (DF.ext == '.cmake.in') | (DF.ext == '.cob') | 
        (DF.ext == '.cbl') | (DF.ext == '.ccp') | (DF.ext == '.cobol') | 
        (DF.ext == '.cpy') | (DF.ext == '.w') | (DF.ext == '.capnp') | 
        (DF.ext == '.mss') | (DF.ext == '.ceylon') | (DF.ext == '.chpl') | 
        (DF.ext == '.ch') | (DF.ext == '.ck') | (DF.ext == '.cirru') | 
        (DF.ext == '.clw') | (DF.ext == '.icl') | (DF.ext == '.dcl') | 
        (DF.ext == '.click') | (DF.ext == '.clj') | (DF.ext == '.boot') | 
        (DF.ext == '.cl2') | (DF.ext == '.cljc') | (DF.ext == '.cljs') | 
        (DF.ext == '.cljs.hl') | (DF.ext == '.cljscm') | (DF.ext == '.cljx') | 
        (DF.ext == '.hic') | (DF.ext == '.coffee') | (DF.ext == '._coffee') | 
        (DF.ext == '.cake') | (DF.ext == '.cjsx') | (DF.ext == '.iced') | 
        (DF.ext == '.cfm') | (DF.ext == '.cfml') | (DF.ext == '.cfc') | 
        (DF.ext == '.lisp') | (DF.ext == '.asd') | (DF.ext == '.cl') | 
        (DF.ext == '.l') | (DF.ext == '.lsp') | (DF.ext == '.ny') | 
        (DF.ext == '.podsl') | (DF.ext == '.sexp') | (DF.ext == '.cwl') | 
        (DF.ext == '.cp') | (DF.ext == '.cps') | (DF.ext == '.cl') | 
        (DF.ext == '.coq') | (DF.ext == '.v') | (DF.ext == '.cr') | 
        (DF.ext == '.orc') | (DF.ext == '.udo') | (DF.ext == '.csd') | 
        (DF.ext == '.sco') | (DF.ext == '.cu') | (DF.ext == '.cuh') | 
        (DF.ext == '.cy') | (DF.ext == '.pyx') | (DF.ext == '.pxd') | 
        (DF.ext == '.pxi') | (DF.ext == '.d') | (DF.ext == '.di') | 
        (DF.ext == '.com') | (DF.ext == '.dm') | (DF.ext == '.d') | 
        (DF.ext == '.dart') | (DF.ext == '.dwl') | (DF.ext == '.dhall') | 
        (DF.ext == '.dockerfile') | (DF.ext == '.djs') | (DF.ext == '.dylan') | 
        (DF.ext == '.dyl') | (DF.ext == '.intr') | (DF.ext == '.lid') | 
        (DF.ext == '.E') | (DF.ext == '.ecl') | (DF.ext == '.eclxml') | 
        (DF.ext == '.ecl') | (DF.ext == '.eq') | (DF.ext == '.e') | 
        (DF.ext == '.ex') | (DF.ext == '.exs') | (DF.ext == '.elm') | 
        (DF.ext == '.el') | (DF.ext == '.emacs') | 
        (DF.ext == '.emacs.desktop') | (DF.ext == '.em') | 
        (DF.ext == '.emberscript') | (DF.ext == '.erl') | 
        (DF.ext == '.app.src') | (DF.ext == '.es') | (DF.ext == '.escript') | 
        (DF.ext == '.hrl') | (DF.ext == '.xrl') | (DF.ext == '.yrl') | 
        (DF.ext == '.fs') | (DF.ext == '.fsi') | (DF.ext == '.fsx') | 
        (DF.ext == '.fst') | (DF.ext == '.fx') | (DF.ext == '.flux') | 
        (DF.ext == '.factor') | (DF.ext == '.fy') | (DF.ext == '.fancypack') | 
        (DF.ext == '.fan') | (DF.ext == '.f') | (DF.ext == '.fs') | 
        (DF.ext == '.fth') | (DF.ext == '.4th') | (DF.ext == '.f') | 
        (DF.ext == '.for') | (DF.ext == '.forth') | (DF.ext == '.fr') | 
        (DF.ext == '.frt') | (DF.ext == '.fs') | (DF.ext == '.f90') | 
        (DF.ext == '.f') | (DF.ext == '.f03') | (DF.ext == '.f08') | 
        (DF.ext == '.f77') | (DF.ext == '.f95') | (DF.ext == '.for') |
        # Extended Fortran
        (DF.ext == '.F') | (DF.ext == '.F90') | (DF.ext == '.k') | 
        (DF.ext == '.exp') | (DF.ext == '.tc') |

        (DF.ext == '.fpp') | (DF.ext == '.ftl') | (DF.ext == '.fr') | 
        (DF.ext == '.g') | (DF.ext == '.cnc') | (DF.ext == '.gco') | 
        (DF.ext == '.gcode') | (DF.ext == '.gaml') | (DF.ext == '.gms') | 
        (DF.ext == '.g') | (DF.ext == '.gap') | (DF.ext == '.gd') | 
        (DF.ext == '.gi') | (DF.ext == '.tst') | (DF.ext == '.md') | 
        (DF.ext == '.gdb') | (DF.ext == '.gdbinit') | (DF.ext == '.gd') | 
        (DF.ext == '.glsl') | (DF.ext == '.fp') | (DF.ext == '.frag') | 
        (DF.ext == '.frg') | (DF.ext == '.fs') | (DF.ext == '.fsh') | 
        (DF.ext == '.fshader') | (DF.ext == '.geo') | (DF.ext == '.geom') | 
        (DF.ext == '.glslv') | (DF.ext == '.gshader') | (DF.ext == '.shader') | 
        (DF.ext == '.tesc') | (DF.ext == '.tese') | (DF.ext == '.vert') | 
        (DF.ext == '.vrx') | (DF.ext == '.vsh') | (DF.ext == '.vshader') | 
        (DF.ext == '.gml') | (DF.ext == '.gs') | (DF.ext == '.kid') | 
        (DF.ext == '.ebuild') | (DF.ext == '.eclass') | (DF.ext == '.feature') | 
        (DF.ext == '.glf') | (DF.ext == '.gp') | (DF.ext == '.gnu') | 
        (DF.ext == '.gnuplot') | (DF.ext == '.plot') | (DF.ext == '.plt') | 
        (DF.ext == '.go') | (DF.ext == '.golo') | (DF.ext == '.gs') | 
        (DF.ext == '.gst') | (DF.ext == '.gsx') | (DF.ext == '.vark') | 
        (DF.ext == '.grace') | (DF.ext == '.gf') | (DF.ext == '.groovy') | 
        (DF.ext == '.grt') | (DF.ext == '.gtpl') | (DF.ext == '.gvy') | 
        (DF.ext == '.gsp') | (DF.ext == '.hcl') | (DF.ext == '.tf') | 
        (DF.ext == '.tfvars') | (DF.ext == '.workflow') | (DF.ext == '.hlsl') | 
        (DF.ext == '.cginc') | (DF.ext == '.fx') | (DF.ext == '.fxh') | 
        (DF.ext == '.hlsli') | (DF.ext == '.hack') | (DF.ext == '.hh') | 
        (DF.ext == '.php') | (DF.ext == '.hb') | (DF.ext == '.hs') | 
        (DF.ext == '.hsc') | (DF.ext == '.hx') | (DF.ext == '.hxsl') | 
        (DF.ext == '.q') | (DF.ext == '.hc') | (DF.ext == '.hy') | 
        (DF.ext == '.bf') | (DF.ext == '.pro') | (DF.ext == '.dlm') | 
        (DF.ext == '.ipf') | (DF.ext == '.idr') | (DF.ext == '.lidr') | 
        (DF.ext == '.ni') | (DF.ext == '.i7x') | (DF.ext == '.iss') | 
        (DF.ext == '.io') | (DF.ext == '.ik') | (DF.ext == '.thy') | 
        (DF.ext == '.ijs') | (DF.ext == '.flex') | (DF.ext == '.jflex') | 
        (DF.ext == '.jq') | (DF.ext == '.jsx') | (DF.ext == '.j') | 
        (DF.ext == '.java') | (DF.ext == '.jsp') | (DF.ext == '.js') | 
        (DF.ext == '._js') | (DF.ext == '.bones') | (DF.ext == '.es') | 
        (DF.ext == '.es6') | (DF.ext == '.frag') | (DF.ext == '.gs') | 
        (DF.ext == '.jake') | (DF.ext == '.jsb') | (DF.ext == '.jscad') | 
        (DF.ext == '.jsfl') | (DF.ext == '.jsm') | (DF.ext == '.jss') | 
        (DF.ext == '.mjs') | (DF.ext == '.njs') | (DF.ext == '.pac') | 
        (DF.ext == '.sjs') | (DF.ext == '.ssjs') | (DF.ext == '.xsjs') | 
        (DF.ext == '.xsjslib') | (DF.ext == '.js.erb') | (DF.ext == '.jison') | 
        (DF.ext == '.jisonlex') | (DF.ext == '.ol') | (DF.ext == '.iol') | 
        (DF.ext == '.jsonnet') | (DF.ext == '.libsonnet') | (DF.ext == '.jl') | 
        (DF.ext == '.krl') | (DF.ext == '.kt') | (DF.ext == '.ktm') | 
        (DF.ext == '.kts') | (DF.ext == '.lfe') | (DF.ext == '.ll') | 
        (DF.ext == '.lol') | (DF.ext == '.lsl') | (DF.ext == '.lslp') | 
        (DF.ext == '.lvproj') | (DF.ext == '.lasso') | (DF.ext == '.las') | 
        (DF.ext == '.lasso8') | (DF.ext == '.lasso9') | (DF.ext == '.lean') | 
        (DF.ext == '.hlean') | (DF.ext == '.l') | (DF.ext == '.lex') | 
        (DF.ext == '.ly') | (DF.ext == '.ily') | (DF.ext == '.b') | 
        (DF.ext == '.m') | (DF.ext == '.lagda') | (DF.ext == '.litcoffee') | 
        (DF.ext == '.lhs') | (DF.ext == '.ls') | (DF.ext == '._ls') | 
        (DF.ext == '.xm') | (DF.ext == '.x') | (DF.ext == '.xi') | 
        (DF.ext == '.lgt') | (DF.ext == '.logtalk') | (DF.ext == '.lookml') | 
        (DF.ext == '.model.lkml') | (DF.ext == '.view.lkml') | 
        (DF.ext == '.ls') | (DF.ext == '.lua') | (DF.ext == '.fcgi') | 
        (DF.ext == '.nse') | (DF.ext == '.p8') | (DF.ext == '.pd_lua') | 
        (DF.ext == '.rbxs') | (DF.ext == '.wlua') | (DF.ext == '.mumps') | 
        (DF.ext == '.m') | (DF.ext == '.m4') | (DF.ext == '.m4') | 
        (DF.ext == '.matlab') | (DF.ext == '.m') | (DF.ext == '.ms') | 
        (DF.ext == '.mcr') | (DF.ext == '.mlir') | (DF.ext == '.mq4') | 
        (DF.ext == '.mqh') | (DF.ext == '.mq5') | (DF.ext == '.mqh') | 
        (DF.ext == '.muf') | (DF.ext == '.m') | (DF.ext == '.mak') | 
        (DF.ext == '.d') | (DF.ext == '.make') | (DF.ext == '.mk') | 
        (DF.ext == '.mkfile') | (DF.ext == '.mako') | (DF.ext == '.mao') | 
        (DF.ext == '.mathematica') | (DF.ext == '.cdf') | (DF.ext == '.m') | 
        (DF.ext == '.ma') | (DF.ext == '.mt') | (DF.ext == '.nb') | 
        (DF.ext == '.nbp') | (DF.ext == '.wl') | (DF.ext == '.wlt') | 
        (DF.ext == '.maxpat') | (DF.ext == '.maxhelp') | 
        (DF.ext == '.maxproj') | (DF.ext == '.mxt') | (DF.ext == '.pat') | 
        (DF.ext == '.m') | (DF.ext == '.moo') | (DF.ext == '.metal') | 
        (DF.ext == '.minid') | (DF.ext == '.druby') | (DF.ext == '.duby') | 
        (DF.ext == '.mirah') | (DF.ext == '.mo') | (DF.ext == '.mod') | 
        (DF.ext == '.i3') | (DF.ext == '.ig') | (DF.ext == '.m3') | 
        (DF.ext == '.mg') | (DF.ext == '.mms') | (DF.ext == '.mmk') | 
        (DF.ext == '.monkey') | (DF.ext == '.monkey2') | (DF.ext == '.moo') | 
        (DF.ext == '.moon') | (DF.ext == '.X68') | (DF.ext == '.myt') | 
        (DF.ext == '.ncl') | (DF.ext == '.nsi') | (DF.ext == '.nsh') | 
        (DF.ext == '.ne') | (DF.ext == '.nearley') | (DF.ext == '.n') | 
        (DF.ext == '.axs') | (DF.ext == '.axi') | (DF.ext == '.axs.erb') | 
        (DF.ext == '.axi.erb') | (DF.ext == '.nlogo') | (DF.ext == '.nl') | 
        (DF.ext == '.lisp') | (DF.ext == '.lsp') | (DF.ext == '.nf') | 
        (DF.ext == '.nim') | (DF.ext == '.nim.cfg') | (DF.ext == '.nimble') | 
        (DF.ext == '.nimrod') | (DF.ext == '.nims') | (DF.ext == '.nit') | 
        (DF.ext == '.nix') | (DF.ext == '.nu') | (DF.ext == '.numpy') | 
        (DF.ext == '.numpyw') | (DF.ext == '.numsc') | (DF.ext == '.ml') | 
        (DF.ext == '.eliom') | (DF.ext == '.eliomi') | (DF.ext == '.ml4') | 
        (DF.ext == '.mli') | (DF.ext == '.mll') | (DF.ext == '.mly') | 
        (DF.ext == '.cls') | (DF.ext == '.m') | (DF.ext == '.h') | 
        (DF.ext == '.mm') | (DF.ext == '.j') | (DF.ext == '.sj') | 
        (DF.ext == '.omgrofl') | (DF.ext == '.opa') | (DF.ext == '.opal') | 
        (DF.ext == '.cl') | (DF.ext == '.opencl') | (DF.ext == '.p') | 
        (DF.ext == '.cls') | (DF.ext == '.w') | (DF.ext == '.scad') | 
        (DF.ext == '.ox') | (DF.ext == '.oxh') | (DF.ext == '.oxo') | 
        (DF.ext == '.oxygene') | (DF.ext == '.oz') | (DF.ext == '.p4') | 
        (DF.ext == '.php') | (DF.ext == '.aw') | (DF.ext == '.ctp') | 
        (DF.ext == '.fcgi') | (DF.ext == '.inc') | (DF.ext == '.php3') |
        (DF.ext == '.php4') | (DF.ext == '.php5') | (DF.ext == '.phps') | 
        (DF.ext == '.phpt') | (DF.ext == '.pls') | (DF.ext == '.bdy') | 
        (DF.ext == '.ddl') | (DF.ext == '.fnc') | (DF.ext == '.pck') | 
        (DF.ext == '.pkb') | (DF.ext == '.pks') | (DF.ext == '.plb') | 
        (DF.ext == '.plsql') | (DF.ext == '.prc') | (DF.ext == '.spc') |
        (DF.ext == '.sql') | (DF.ext == '.tpb') | (DF.ext == '.tps') | 
        (DF.ext == '.trg') | (DF.ext == '.vw') | (DF.ext == '.pgsql') | 
        (DF.ext == '.sql') | (DF.ext == '.pov') | (DF.ext == '.inc') | 
        (DF.ext == '.pan') | (DF.ext == '.psc') | (DF.ext == '.parrot') | 
        (DF.ext == '.pasm') | (DF.ext == '.pir') | (DF.ext == '.pas') | 
        (DF.ext == '.dfm') | (DF.ext == '.dpr') | (DF.ext == '.inc') | 
        (DF.ext == '.lpr') | (DF.ext == '.pascal') | (DF.ext == '.pp') | 
        (DF.ext == '.pwn') | (DF.ext == '.inc') | (DF.ext == '.sma') | 
        (DF.ext == '.pep') | (DF.ext == '.pl') | (DF.ext == '.al') | 
        (DF.ext == '.cgi') | (DF.ext == '.fcgi') | (DF.ext == '.perl') | 
        (DF.ext == '.ph') | (DF.ext == '.plx') | (DF.ext == '.pm') | 
        (DF.ext == '.psgi') | (DF.ext == '.t') | (DF.ext == '.6pl') | 
        (DF.ext == '.6pm') | (DF.ext == '.nqp') | (DF.ext == '.p6') | 
        (DF.ext == '.p6l') | (DF.ext == '.p6m') | (DF.ext == '.pl') | 
        (DF.ext == '.pl6') | (DF.ext == '.pm') | (DF.ext == '.pm6') | 
        (DF.ext == '.t') | (DF.ext == '.l') | (DF.ext == '.pig') | 
        (DF.ext == '.pike') | (DF.ext == '.pmod') | (DF.ext == '.pogo') | 
        (DF.ext == '.pony') | (DF.ext == '.pbt') | (DF.ext == '.sra') | 
        (DF.ext == '.sru') | (DF.ext == '.srw') | (DF.ext == '.ps1') | 
        (DF.ext == '.psd1') | (DF.ext == '.psm1') | (DF.ext == '.pde') | 
        (DF.ext == '.pl') | (DF.ext == '.pro') | (DF.ext == '.prolog') | 
        (DF.ext == '.yap') | (DF.ext == '.spin') | (DF.ext == '.pp') | 
        (DF.ext == '.pb') | (DF.ext == '.pbi') | (DF.ext == '.purs') | 
        (DF.ext == '.py') | (DF.ext == '.bzl') | (DF.ext == '.cgi') | 
        (DF.ext == '.fcgi') | (DF.ext == '.gyp') | (DF.ext == '.gypi') | 
        (DF.ext == '.lmi') | (DF.ext == '.py3') | (DF.ext == '.pyde') | 
        (DF.ext == '.pyi') | (DF.ext == '.pyp') | (DF.ext == '.pyt') | 
        (DF.ext == '.pyw') | (DF.ext == '.rpy') | (DF.ext == '.spec') | 
        (DF.ext == '.tac') | (DF.ext == '.wsgi') | (DF.ext == '.xpy') | 
        (DF.ext == '.qml') | (DF.ext == '.qbs') | (DF.ext == '.pro') | 
        (DF.ext == '.pri') | (DF.ext == '.r') | (DF.ext == '.rd') | 
        (DF.ext == '.rsx') | (DF.ext == '.rbbas') | (DF.ext == '.rbfrm') | 
        (DF.ext == '.rbmnu') | (DF.ext == '.rbres') | (DF.ext == '.rbtbar') | 
        (DF.ext == '.rbuistate') | (DF.ext == '.rexx') | (DF.ext == '.pprx') | 
        (DF.ext == '.rex') | (DF.ext == '.x') | (DF.ext == '.rkt') | 
        (DF.ext == '.rktd') | (DF.ext == '.rktl') | (DF.ext == '.scrbl') | 
        (DF.ext == '.rl') | (DF.ext == '.rsc') | (DF.ext == '.re') | 
        (DF.ext == '.rei') | (DF.ext == '.reb') | (DF.ext == '.r') | 
        (DF.ext == '.r2') | (DF.ext == '.r3') | (DF.ext == '.rebol') | 
        (DF.ext == '.red') | (DF.ext == '.reds') | (DF.ext == '.cw') | 
        (DF.ext == '.rpy') | (DF.ext == '.rs') | (DF.ext == '.rsh') | 
        (DF.ext == '.ring') | (DF.ext == '.robot') | (DF.ext == '.rg') | 
        (DF.ext == '.rb') | (DF.ext == '.builder') | (DF.ext == '.eye') | 
        (DF.ext == '.fcgi') | (DF.ext == '.gemspec') | (DF.ext == '.god') | 
        (DF.ext == '.jbuilder') | (DF.ext == '.mspec') | 
        (DF.ext == '.pluginspec') | (DF.ext == '.podspec') | 
        (DF.ext == '.rabl') | (DF.ext == '.rake') | (DF.ext == '.rbuild') | 
        (DF.ext == '.rbw') | (DF.ext == '.rbx') | (DF.ext == '.ru') | 
        (DF.ext == '.ruby') | (DF.ext == '.spec') | (DF.ext == '.thor') | 
        (DF.ext == '.watchr') | (DF.ext == '.rs') | (DF.ext == '.rs.in') | 
        (DF.ext == '.sas') | (DF.ext == '.smt2') | (DF.ext == '.smt') | 
        (DF.ext == '.sqf') | (DF.ext == '.hqf') | (DF.ext == '.sql') | 
        (DF.ext == '.db2') | (DF.ext == '.sage') | (DF.ext == '.sagews') | 
        (DF.ext == '.sls') | (DF.ext == '.scala') | (DF.ext == '.kojo') | 
        (DF.ext == '.sbt') | (DF.ext == '.sc') | (DF.ext == '.scm') | 
        (DF.ext == '.sch') | (DF.ext == '.sld') | (DF.ext == '.sls') | 
        (DF.ext == '.sps') | (DF.ext == '.ss') | (DF.ext == '.sci') | 
        (DF.ext == '.sce') | (DF.ext == '.tst') | (DF.ext == '.self') | 
        (DF.ext == '.shader') | (DF.ext == '.sh') | (DF.ext == '.bash') | 
        (DF.ext == '.bats') | (DF.ext == '.cgi') | (DF.ext == '.command') | 
        (DF.ext == '.fcgi') | (DF.ext == '.ksh') | (DF.ext == '.sh.in') | 
        (DF.ext == '.tmux') | (DF.ext == '.tool') | (DF.ext == '.zsh') | 
        (DF.ext == '.sh-session') | (DF.ext == '.shen') | (DF.ext == '.sl') | 
        (DF.ext == '.ice') | (DF.ext == '.cocci') | (DF.ext == '.smali') | 
        (DF.ext == '.st') | (DF.ext == '.cs') | (DF.ext == '.tpl') | 
        (DF.ext == '.sp') | (DF.ext == '.inc') | (DF.ext == '.nut') |
        (DF.ext == '.stan') | (DF.ext == '.ML') | (DF.ext == '.fun') | 
        (DF.ext == '.sig') | (DF.ext == '.sml') | (DF.ext == '.do') | 
        (DF.ext == '.ado') | (DF.ext == '.doh') | (DF.ext == '.ihlp') | 
        (DF.ext == '.mata') | (DF.ext == '.matah') | (DF.ext == '.sthlp') | 
        (DF.ext == '.sc') | (DF.ext == '.scd') | (DF.ext == '.swift') | 
        (DF.ext == '.sv') | (DF.ext == '.svh') | (DF.ext == '.vh') | 
        (DF.ext == '.8xp') | (DF.ext == '.8xk') | (DF.ext == '.8xk.txt') | 
        (DF.ext == '.8xp.txt') | (DF.ext == '.tla') | (DF.ext == '.sql') | 
        (DF.ext == '.tsx') | (DF.ext == '.txl') | (DF.ext == '.tcl') | 
        (DF.ext == '.adp') | (DF.ext == '.tm') | (DF.ext == '.tcsh') | 
        (DF.ext == '.csh') | (DF.ext == '.t') | (DF.ext == '.thrift') | 
        (DF.ext == '.t') | (DF.ext == '.tu') | (DF.ext == '.ts') | 
        (DF.ext == '.upc') | (DF.ext == '.s') | (DF.ext == '.ms') | 
        (DF.ext == '.uno') | (DF.ext == '.uc') | (DF.ext == '.ur') | 
        (DF.ext == '.urs') | (DF.ext == '.v') | (DF.ext == '.vcl') | 
        (DF.ext == '.vhdl') | (DF.ext == '.vhd') | (DF.ext == '.vhf') | 
        (DF.ext == '.vhi') | (DF.ext == '.vho') | (DF.ext == '.vhs') | 
        (DF.ext == '.vht') | (DF.ext == '.vhw') | (DF.ext == '.vvp') | 
        (DF.ext == '.vcd') | (DF.ext == '.vala') | (DF.ext == '.vapi') | 
        (DF.ext == '.v') | (DF.ext == '.veo') | (DF.ext == '.vim') | 
        (DF.ext == '.vba') | (DF.ext == '.vmb') | (DF.ext == '.vb') | 
        (DF.ext == '.bas') | (DF.ext == '.cls') | (DF.ext == '.frm') | 
        (DF.ext == '.frx') | (DF.ext == '.vba') | (DF.ext == '.vbhtml') | 
        (DF.ext == '.vbs') | (DF.ext == '.volt') | (DF.ext == '.wast') | 
        (DF.ext == '.wat') | (DF.ext == '.webidl') | (DF.ext == '.wlk') | 
        (DF.ext == '.x10') | (DF.ext == '.xc') | (DF.ext == '.xpl') | 
        (DF.ext == '.xproc') | (DF.ext == '.xquery') | (DF.ext == '.xq') | 
        (DF.ext == '.xql') | (DF.ext == '.xqm') | (DF.ext == '.xqy') | 
        (DF.ext == '.xs') | (DF.ext == '.xslt') | (DF.ext == '.xsl') | 
        (DF.ext == '.xojo_code') | (DF.ext == '.xojo_menu') | 
        (DF.ext == '.xojo_report') | (DF.ext == '.xojo_script') | 
        (DF.ext == '.xojo_toolbar') | (DF.ext == '.xojo_window') | 
        (DF.ext == '.xtend') | (DF.ext == '.yar') | (DF.ext == '.yara') | 
        (DF.ext == '.y') | (DF.ext == '.yacc') | (DF.ext == '.yy') | 
        (DF.ext == '.zap') | (DF.ext == '.xzap') | (DF.ext == '.zil') | 
        (DF.ext == '.mud') | (DF.ext == '.zeek') | (DF.ext == '.bro') | 
        (DF.ext == '.zs') | (DF.ext == '.zep') | (DF.ext == '.zig') | 
        (DF.ext == '.zimpl') | (DF.ext == '.zmpl') | (DF.ext == '.zpl') | 
        (DF.ext == '.ec') | (DF.ext == '.eh') | (DF.ext == '.fish') | 
        (DF.ext == '.mcfunction') | (DF.ext == '.mu') | (DF.ext == '.nc') | 
        (DF.ext == '.ooc') | (DF.ext == '.q') | (DF.ext == '.sed') | 
        (DF.ext == '.wdl') | (DF.ext == '.wisp') | (DF.ext == '.prg') | 
        (DF.ext == '.ch') | (DF.ext == '.prw') | (DF.ext == '.expect') | 
        (DF.ext == '.a') | (DF.ext == '.lib') | (DF.ext == '.ar') | 
        (DF.ext == '.img') | (DF.ext == '.nd') | (DF.ext == '.exe') | 
        (DF.ext == '.dll') | (DF.ext == '.o') |
        # Filenames
        (DF.name == 'gnat.adc') | (DF.name == 'APKBUILD') | 
        (DF.name == 'CMakeLists.txt') | (DF.name == 'riemann.config') | 
        (DF.name == 'Cakefile') | (DF.name == 'Dockerfile') | 
        (DF.name == 'mix.lock') | (DF.name == '.abbrev_defs') | 
        (DF.name == '.emacs') | (DF.name == '.emacs.desktop') | 
        (DF.name == '.gnus') | (DF.name == '.spacemacs') | 
        (DF.name == '.viper') | (DF.name == 'Cask') | 
        (DF.name == 'Project.ede') | (DF.name == '_emacs') | 
        (DF.name == 'abbrev_defs') | (DF.name == 'Emakefile') | 
        (DF.name == 'rebar.config') | (DF.name == 'rebar.config.lock') | 
        (DF.name == 'rebar.lock') | (DF.name == '.factor-boot-rc') | 
        (DF.name == '.factor-rc') | (DF.name == 'Fakefile') | 
        (DF.name == 'Jenkinsfile') | (DF.name == 'ROOT') | 
        (DF.name == 'Jakefile') | (DF.name == 'Slakefile') | 
        (DF.name == 'configure.ac') | (DF.name == 'BSDmakefile') | 
        (DF.name == 'GNUmakefile') | (DF.name == 'Kbuild') | 
        (DF.name == 'Makefile') | (DF.name == 'Makefile.am') | 
        (DF.name == 'Makefile.boot') | (DF.name == 'Makefile.frag') | 
        (DF.name == 'Makefile.in') | (DF.name == 'Makefile.inc') | 
        (DF.name == 'Makefile.wat') | (DF.name == 'makefile') | 
        (DF.name == 'makefile.sco') | (DF.name == 'mkfile') | 
        (DF.name == 'meson.build') | (DF.name == 'meson_options.txt') | 
        (DF.name == 'descrip.mmk') | (DF.name == 'descrip.mms') | 
        (DF.name == 'nextflow.config') | (DF.name == 'nim.cfg') | 
        (DF.name == 'Nukefile') | (DF.name == '.php') | (DF.name == '.php_cs') | 
        (DF.name == '.php_cs.dist') | (DF.name == 'Phakefile') | 
        (DF.name == 'Makefile.PL') | (DF.name == 'Rexfile') | 
        (DF.name == 'ack') | (DF.name == 'cpanfile') | 
        (DF.name == 'Modulefile') | (DF.name == '.gclient') | 
        (DF.name == 'BUCK') | (DF.name == 'BUILD') | 
        (DF.name == 'BUILD.bazel') | (DF.name == 'DEPS') | 
        (DF.name == 'SConscript') | (DF.name == 'SConstruct') | 
        (DF.name == 'Snakefile') | (DF.name == 'WORKSPACE') | 
        (DF.name == 'wscript') | (DF.name == 'm3makefile') | 
        (DF.name == 'm3overrides') | (DF.name == '.Rprofile') | 
        (DF.name == 'expr-dist') | (DF.name == '.irbrc') | 
        (DF.name == '.pryrc') | (DF.name == 'Appraisals') | 
        (DF.name == 'Berksfile') | (DF.name == 'Brewfile') | 
        (DF.name == 'Buildfile') | (DF.name == 'Capfile') | 
        (DF.name == 'Dangerfile') | (DF.name == 'Deliverfile') | 
        (DF.name == 'Fastfile') | (DF.name == 'Gemfile') | 
        (DF.name == 'Gemfile.lock') | (DF.name == 'Guardfile') | 
        (DF.name == 'Jarfile') | (DF.name == 'Mavenfile') | 
        (DF.name == 'Podfile') | (DF.name == 'Puppetfile') | 
        (DF.name == 'Rakefile') | (DF.name == 'Snapfile') | 
        (DF.name == 'Thorfile') | (DF.name == 'Vagrantfile') | 
        (DF.name == 'buildfile') | (DF.name == '.bash_aliases') | 
        (DF.name == '.bash_history') | (DF.name == '.bash_logout') | 
        (DF.name == '.bash_profile') | (DF.name == '.bashrc') | 
        (DF.name == '.cshrc') | (DF.name == '.login') | 
        (DF.name == '.profile') | (DF.name == '.zlogin') | 
        (DF.name == '.zlogout') | (DF.name == '.zprofile') | 
        (DF.name == '.zshenv') | (DF.name == '.zshrc') | (DF.name == '9fs') | 
        (DF.name == 'PKGBUILD') | (DF.name == 'bash_aliases') | 
        (DF.name == 'bash_logout') | (DF.name == 'bash_profile') | 
        (DF.name == 'bashrc') | (DF.name == 'cshrc') | (DF.name == 'gradlew') | 
        (DF.name == 'login') | (DF.name == 'man') | (DF.name == 'profile') | 
        (DF.name == 'zlogin') | (DF.name == 'zlogout') | 
        (DF.name == 'zprofile') | (DF.name == 'zshenv') | (DF.name == 'zshrc') | 
        (DF.name == 'owh') | (DF.name == 'starfield') | (DF.name == '.gvimrc') | 
        (DF.name == '.nvimrc') | (DF.name == '.vimrc') | (DF.name == '_vimrc') | 
        (DF.name == 'gvimrc') | (DF.name == 'nvimrc') | (DF.name == 'vimrc') | 
        (DF.name == 'a.out') |
        # Extended file names
        (DF.name == 'dune') | (DF.name == 'dune-project') | 
        (DF.name == 'opam') | (DF.name == 'opam')
    )
    mask = (mask_linguist_language_programming_yml)
    DF['ling'][mask] = 'programming'

    # Everything that we cannot classify as in the above
    mask = (pd.isna(DF.ling))
    DF['ling'][mask] = 'other'


def categorize():
    global DF
    complete_csv = os.path.join(INTERPRET_DIR, 
                                "all_repo_files_categorized.csv.bz2")
    if os.path.isfile(complete_csv):
        logging.info(f"Reading from existing archive {complete_csv}...")
        DF = pd.read_csv(complete_csv, compression='infer', lineterminator='\n',
                         na_filter=False)
    else:
        # Collapse kinds to more comprehensive kinds
        DF['easy_kind'] = np.nan
        DF['major'] = np.nan
        
        logging.info("Categorizing code...")
        categorize_programming()
        logging.info("Categorizing data...")
        categorize_data()
        logging.info("Categorizing prose...")
        categorize_prose()
        logging.info("Categorizing other...")
        categorize_other()

        logging.info("Categorizing linguist...")
        catregorize_linuguist()

        mask = (DF.easy_kind == 'source code') & (DF.ling == 'data')
        DF['easy_kind'][mask] = 'app data'
        DF['major'][mask] = 'data'

        mask = (DF['easy_kind'] == '')
        DF['easy_kind'][mask] = 'other'
        DF['major'][mask] = 'other'
        
        logging.info("Writing compressed CSV file...")
        DF.to_csv(complete_csv, compression='infer', index=False,)
        logging.info("Done...")


if __name__ == "__main__":
    categorize()
